{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Embed a phone into any webpage with RingCentral Embeddable","text":"<p>Are you integrating with a CRM?</p> <p>Are you looking to log phone calls, SMS conversations and all other communications into a remote system, like a CRM or proprietary system? Check out App Connect! Built on top of Embeddable, App Connect makes building a full-featured integration with a CRM much, much easier. </p> <p>Learn more</p> <p>RingCentral Embeddable provides a ready-to-use, fully-functional web phone that can be embedded into any web site. Embeddable is a javascript wrapper around the foundational RingCentral Widgets Library. By adding a few lines of javascript, anyone can embed a phone into any web page in seconds. </p>"},{"location":"#quick-start","title":"Quick start","text":"Javascriptiframe <p>Add following code to any website's header to embed a RingCentral phone into that page. </p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>Add the following anywhere on your webpage.</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" allow=\"microphone\" \n  src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>Or access our RingCentral Embeddable configuration tool for a live demo.</p> <p>When loading RingCentral Embeddable for the first time, users will need to grant access to their microphone and speaker.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>A RingCentral account</li> <li>A supported browser, including:<ul> <li>Chrome</li> <li>Microsoft Edge</li> <li>Firefox</li> </ul> </li> </ul> <p>Removing the \"FOR DEMO PURPOSES ONLY\" banner</p> <p>You may observe that a banner appears when running the sample code above. To remove this banner, please register your own application and use the client ID associated with that application. </p>"},{"location":"2.x/","title":"Introducing RingCentral Embeddable 2.0","text":"<p>RingCentral Embeddable 2.0, marks the next generation of this popular RingCentral product, allowing developers to easily embed a RingCentral phone, SMS client, and more into any webpage or web application. </p> <p>RingCentral Embeddable 2.0 is 100% backwards compatible</p> <p>The 2.x version of RingCentral Embeddable is completely backwards compatible with all previous versions of Embeddable 1.x. This means that developers can quickly and easily upgrade to the latest version with minimal risk of breaking your existing implementation. PubNub subscription which is deprecated in 1.x is removed in 2.x.</p>"},{"location":"2.x/#whats-new-in-20","title":"What's new in 2.0","text":"<p>Updated design</p> <p>RingCentral Embeddable 2.0 front-end has been completely refactored to better conform with RingCentral's user interface guidelines and best practices. Users familiar with the RingCentral app will feel right at home using the new version of Embeddable. User interface highlights include:</p> <ul> <li>New navigation bar: A redesigned navigation bar for improved accessibility and navigation efficiency.</li> <li>New phone dialer: The dialer, calls, voicemail and recordings tabs are merged into the phone tab.</li> <li>New call history: New call history UI provides a more extensible design so developers can add more options for taking action on past calls.</li> <li>New Text inbox: Experience a refreshed SMS inbox with a modernized user interface, making message management more efficient. Faxes are split into independent tab.</li> <li>New meetings home: The meetings interface has been updated for a modernized user interface.</li> </ul> <p>Direct access to call recordings</p> <p>In this new version, a new recordings page has been added, allowing users to conveniently manage and play their recorded calls directly within Embeddable. </p> <p>To enable this feature, you must have <code>ReadCallRecording</code> app scope added in your RingCentral app settings.</p> <p>SMS templates support</p> <p>Author responses to common SMS inquiries and share those responses across all employees in your company using RingEX's SMS template feature. This feature require some special setup to fully enable. </p> <p>Enhanced voicemail player </p> <p>The new voicemail player in RingCentral Embeddable 2.x comes with seek support, providing users with more control over their voicemail playback.</p> <p>Noise reduction</p> <p>Enjoy improved audio quality with noise reduction enabled by default, ensuring a clearer communication experience. This feature is available, but disabled by default in Embeddable 1.x.</p> <p>Audio settings</p> <p>RingCentral Embeddable 2.x introduces a new audio settings page, allowing users to easily configure their audio input and output devices. It allows users to configure speaker volume and ringtone device.</p>"},{"location":"2.x/#developer-features","title":"Developer features","text":"<p>Over the course of the Embeddable 2.0, we will be working to make the UI more extensible by developers, without developers having to know or code HTML and CSS to conform to the RingCentral UI standard.</p> <p>Customized settings</p> <p>RingCentral Embeddable 2.x introduces a new customized settings API, offering developers more flexibility to tailor Embeddable's settings to the specific needs of the application it powers. Consider for example a circumstance in which Embeddable is being used within a third-party app, and settings specific to that app need to be made available to end users. This feature allows developers to inject the setting/preference into the \"Settings\" page using a simple JSON data structure. </p> <p>Customized pages and tabs</p> <p>RingCentral Embeddable 2.x allows developers to register custom tabs and custom pages into the widget using a simple JSON schema. This allows developers to extend the user interface of Embeddable in countless ways. Generate fully customized forms to prompt users for input, or create custom listing screens to allow users to scroll and search data sources. </p>"},{"location":"2.x/#try-it","title":"Try it","text":"<p>If you are using latest build, you will be upgraded to 2.x version automatically. If you want to use fixed version uri, you can upgrade manually:</p> Javascriptiframe <p>Add following code to any website's header to embed a RingCentral phone into that page. </p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/2.2.0/adapter.js?clientId=YOUR_RINGCENTRAL_CLIENT_ID\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>Add the following anywhere on your webpage.</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" allow=\"microphone\" \n  src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/2.2.0/app.html?clientId=YOUR_RINGCENTRAL_CLIENT_ID\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>Then add following redirect URI into your app settings in RingCentral Developer Console:</p> <pre><code>https://apps.ringcentral.com/integration/ringcentral-embeddable/2.2.0/redirect.html\n</code></pre>"},{"location":"3.x/","title":"RingCentral Embeddable 3.0 Beta","text":"<p>3.0.0</p> <p>RingCentral Embeddable 3.0 marks the next generation of this popular RingCentral product, allowing developers to easily embed a RingCentral phone, SMS client, and more into any webpage or web application. Version 3.0 delivers a significantly enhanced calling experience and modern UI architecture.</p> <p>100% Backwards Compatible</p> <p>RingCentral Embeddable 3.0 is fully backwards compatible with 2.x applications. You can upgrade seamlessly without breaking changes.</p> <p>Beta Release</p> <p>Version 3.0 is currently in BETA. We welcome feedback and suggestions for improvements.</p>"},{"location":"3.x/#whats-new-in-30","title":"What's new in 3.0","text":""},{"location":"3.x/#enhanced-ui-with-side-panel","title":"Enhanced UI with Side Panel","text":"<p>The most significant improvement in 3.0 is the side panel architecture. This new design allows users to access detailed information without leaving the main list view, creating a more fluid and efficient user experience.</p> <p>Supported detail pages:</p> <ul> <li> Call recording page - Access and manage call recordings</li> <li> Voicemail details page - Listen to and manage voicemails</li> <li> SMS conversation page - View full message threads</li> <li> Fax details page - Review sent and received faxes</li> <li> Contact details page - Complete contact information</li> <li> Chat conversation page - Team messaging conversations</li> <li> Log call page - Call logging and notes</li> <li> Log messages page - Message logging interface</li> </ul>"},{"location":"3.x/#call-widgets","title":"Call Widgets","text":"<p>Call Widgets represent a powerful new capability that allows developers to inject dynamic, contextual content directly into the calling experience.</p> <p></p> <p>Key features:</p> <ul> <li>Contextual integration - Widgets appear automatically during active calls</li> <li>Dynamic content - Display CRM data, support cases, or any custom information</li> <li>Real-time updates - Content updates based on call context and user interactions</li> <li>Flexible UI - Built on JSON Schema for maximum customization</li> </ul> <p>Learn more about Call Widgets</p> <p>Get comprehensive details about implementing call widgets in the call widget documentation.</p>"},{"location":"3.x/#getting-started-with-30","title":"Getting started with 3.0","text":""},{"location":"3.x/#quick-setup","title":"Quick setup","text":"<p>Update your application to use the 3.x build:</p> Javascriptiframe <p>Add the following code to your website's header to embed RingCentral Embeddable 3.0:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/3.x/adapter.js?clientId=YOUR_RINGCENTRAL_CLIENT_ID&amp;enableSideWidget=1\"; // (1)!\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <ol> <li>Replace <code>YOUR_RINGCENTRAL_CLIENT_ID</code> with your actual RingCentral application client ID</li> </ol> <p>Add the following iframe anywhere on your webpage:</p> <pre><code>&lt;iframe \n  width=\"300\" \n  height=\"500\" \n  allow=\"microphone\" \n  src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/3.x/app.html?clientId=YOUR_RINGCENTRAL_CLIENT_ID&amp;enableSideWidget=1\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"3.x/#required-configuration","title":"Required configuration","text":"<p>Add the following redirect URI to your RingCentral application settings in the Developer Console:</p> <pre><code>https://apps.ringcentral.com/integration/ringcentral-embeddable/3.x/redirect.html\n</code></pre> <p>Important</p> <p>The redirect URI must be added to your RingCentral application configuration, or authentication will fail.</p>"},{"location":"3.x/#migration-from-2x","title":"Migration from 2.x","text":""},{"location":"3.x/#seamless-upgrade","title":"Seamless upgrade","text":"<p>Migrating from 2.x to 3.0 is straightforward:</p> <ol> <li>Update the URL - Change <code>latest</code> or <code>2.x</code> to <code>3.x</code> in your script src</li> <li>Add enableSideWidget - Include <code>enableSideWidget=1</code> to access new features</li> <li>Update redirect URI - Add the 3.x redirect URI to your app settings</li> <li>Test thoroughly - Verify all existing functionality works as expected</li> </ol>"},{"location":"3.x/#next-steps","title":"Next steps","text":"<p>Ready to get started with RingCentral Embeddable 3.0?</p> <p>Online demo Call widgets docs</p>"},{"location":"app-development/","title":"Develop your application","text":"<p>Introducing RingCentral Embeddable 2.0</p> <p>Consider building your Embeddable application on the next version of RingCentral Embeddable to take full advantage of the new features and capabilities it brings. </p> <p>Upon successfully registering your application you will be provided with a unique client ID to identify your application on the network. Your next step will be to develop your application using this unique client ID in the RingCentral environment. </p>"},{"location":"app-development/#initializing-your-application","title":"Initializing your application","text":"<p>To develop your application, you will need to update two of RingCentral Embeddable's configuration parameters. Set the following parameters:</p> Parameter Value <code>clientId</code> Your client ID <code>appServer</code> <code>https://platform.ringcentral.com</code>"},{"location":"app-development/#example-using-a-script-tag","title":"Example using a <code>&lt;script&gt;</code> tag","text":"<pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    var clientId = \"YOUR CLIENT ID\";\n    var appServer = \"https://platform.ringcentral.com\"\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?clientId=\"+clientId+\"&amp;appServer=\"+appServer;\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"app-development/#example-using-an-iframe","title":"Example using an iframe","text":"<pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\"\n        src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?clientId=your_app_client_id&amp;appServer=https://platform.ringcentral.com\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"app-registration/","title":"Registering your application","text":"<p>Before you begin development, you will first need to register your application via the RingCentral Developer Console. This step will provision your application a unique set of credentials used to identify your application on the network, and comes with the benefits listed below.</p>"},{"location":"app-registration/#benefits","title":"Benefits","text":"<ul> <li>Your application will be less likely impacted by users of other instances of Embeddable</li> <li>You will have visibility into the analytics of your user's use of your Embeddable application</li> <li>You will be able to better customize your instance of Embeddable</li> <li>The \"FOR DEMO PURPOSES ONLY\" banner will be removed from your application</li> </ul> <p>About the \"FOR DEMO PURPOSES ONLY\" banner</p> <p>Some users of RingCentral Embeddable may observe a banner that appears above the dialer that reads, \"FOR DEMO PURPOSES ONLY.\" This banner appears when a Developer uses the default client ID and secret that comes bundled with the RingCentral Embeddable library. This default client ID and secret are intended to make trying out Embeddable easy by eliminating the step of having to pre-register an application. </p> <p>While nothing prevents a developer from using the default client ID and secret, it is strongly recommended that developers register their own application when deploying and using RingCentral Embeddable in a production context.</p>"},{"location":"app-registration/#steps-in-registering-an-application","title":"Steps in registering an application","text":"<ol> <li> <p>Login to the Developer Console, creating an account as necessary.</p> </li> <li> <p>Click \"Register App\"</p> </li> <li> <p>Select \"REST API App\" and click \"Next.\"</p> </li> <li> <p>Under the Auth section:</p> <ul> <li>Select \"3-legged OAuth flow authorization code\" </li> <li>Select \"Client-side web app, e.g. SPA, Javascript\"</li> <li>Set \"OAuth Redirect URI\" to:</li> </ul> <p>Latest Embeddable version: <code>https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/redirect.html</code></p> <pre><code>For fixed version: `https://apps.ringcentral.com/integration/ringcentral-embeddable/$VERSION/redirect.html`\n</code></pre> </li> <li> <p>Under the Security section, add the following \"Application scopes:\"</p> <ul> <li><code>Call Control</code></li> <li><code>Edit Message</code></li> <li><code>Edit Presence</code></li> <li><code>Internal Messages</code></li> <li><code>Read Accounts</code></li> <li><code>Read Call Log</code></li> <li><code>Read Call Recording</code> (2.x recordings feature)</li> <li><code>Read Contacts</code></li> <li><code>Read Messages</code></li> <li><code>Read Presence</code></li> <li><code>RingOut</code></li> <li><code>SMS</code></li> <li><code>VoIP Calling</code></li> <li><code>WebSocketSubscription</code></li> <li><code>Edit Extensions</code> (2.x SMS templates feature)</li> <li><code>TeamMessaging</code> (optional)</li> <li><code>Video</code> (optional for Meeting feature)</li> </ul> </li> </ol> <p>For all other parameters you are free to select whatever values your prefer. Consult the Developer Guide to learn more about app registration.</p>"},{"location":"initialization/","title":"Installing Embeddable on a web page","text":"<p>RingCentral Embeddable supports two ways for integrating itself onto a webpage. They include:</p> <ul> <li>via Javascript</li> <li>via an iframe</li> </ul>"},{"location":"initialization/#embedding-via-javascript","title":"Embedding via Javascript","text":"<p>Add following the following code to the <code>&lt;head&gt;</code> section of a website. This method is recommended for most applications as it optimised page load performance. </p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>You may also load RingCentral Embeddable directly as follows:</p> <pre><code>&lt;script src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js\"&gt;\n&lt;/script&gt;\n</code></pre> <p>Learn more about the <code>defer</code> and <code>async</code> attributes when loading scripts directly</p>"},{"location":"initialization/#initializing-embeddable-manually","title":"Initializing Embeddable manually","text":"<p>Starting in <code>v1.8.5</code>, one can initialize Embeddable manually using the code below. This is beneficial if your application needs to load a lot of Javascript and you need to optimize page load and rendering speeds. Note: this is only available when initializing via Javacript. </p> <pre><code>&lt;script&gt;\n  window.RC_EMBEDDABLE_ADAPTER_MANUAL_INIT = true; // enable manual init\n&lt;/script&gt;\n&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>Once the script has been loaded, you can trigger the initialization process as follows:</p> <pre><code>window.RCAdapterInit();\n</code></pre> <p>And you can dispose of Embeddable as well:</p> <pre><code>window.RCAdapterDispose();\n</code></pre>"},{"location":"initialization/#embedding-via-an-iframe","title":"Embedding via an iframe","text":"<p>Some developers may prefer to load Embeddable directly via an iframe for security or performance reasons. To load Embeddable via an iframe, use the following code.</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"autoplay; microphone\" \n        src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"multiple-brands/","title":"Multiple Brands","text":"<p>RingCentral works with a number of carriers and partners to deliver a cutting edge white labeled Cloud Communications service directly to their respective customers. This guide will show you how to create RingCentral Embeddable app for other brands.</p>"},{"location":"multiple-brands/#att-officehand","title":"AT&amp;T Office@Hand","text":""},{"location":"multiple-brands/#adapter-js-way","title":"Adapter JS way","text":"<ul> <li>Use <code>adapter.att.js</code> to instead of <code>adapter.js</code></li> <li>Set <code>appServer</code> to <code>https://platform.ringcentral.biz</code></li> </ul> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.att.js?appServer=https://platform.ringcentral.biz\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"multiple-brands/#iframe-way","title":"Iframe way","text":"<p>Add <code>brand=att</code> and <code>appServer</code> in src query parameter:</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?brand=att&amp;appServer=https://platform.ringcentral.biz\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"multiple-brands/#bt-cloud-work","title":"BT Cloud Work","text":"<p>Use <code>adapter.bt.js</code> to instead of <code>adapter.js</code>:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.bt.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"multiple-brands/#iframe-way_1","title":"Iframe way","text":"<p>Add <code>brand=bt</code> in src query parameter:</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?brand=bt\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"multiple-brands/#telus","title":"TELUS","text":"<p>Use <code>adapter.telus.js</code> to instead of <code>adapter.js</code>:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.telus.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"multiple-brands/#iframe-way_2","title":"Iframe way","text":"<p>Add <code>brand=telus</code> in src query parameter:</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?brand=telus\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"multiple-brands/#atos-unify-office","title":"Atos Unify Office","text":"<p>From v1.8.0</p> <p>Use <code>adapter.atos.js</code> to instead of <code>adapter.js</code>:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.atos.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"multiple-brands/#iframe-way_3","title":"Iframe way","text":"<p>Add <code>brand=atos</code> in src query parameter:</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?brand=atos\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"multiple-brands/#avaya-cloud-office","title":"Avaya Cloud Office","text":"<p>From v1.8.0</p> <p>Use <code>adapter.avaya.js</code> to instead of <code>adapter.js</code>:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.avaya.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"multiple-brands/#iframe-way_4","title":"Iframe way","text":"<p>Add <code>brand=avaya</code> in src query parameter:</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?brand=avaya\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"multiple-brands/#rainbow-office","title":"Rainbow Office","text":"<p>From v1.8.0</p> <p>Use <code>adapter.rainbow.js</code> to instead of <code>adapter.js</code>:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.rainbow.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"multiple-brands/#iframe-way_5","title":"Iframe way","text":"<p>Add <code>brand=rainbow</code> in src query parameter:</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?brand=rainbow\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"multiple-brands/#other-brands","title":"Other Brands","text":"<p>For other brands, we are still customizing styles for them. Those users can use with default brand.</p>"},{"location":"multiple-brands/#adapter-js-way_1","title":"Adapter JS way","text":"<pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"multiple-brands/#iframe-way_6","title":"Iframe way","text":"<pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"self-hosting/","title":"Hosting RingCentral Embeddable from your own servers","text":"<p>While not recommended, some developers may wish to download the RingCentral Embeddable javascript library and host it from their own servers. If you elect to do this, make sure you also:</p> <ul> <li>create a custom <code>redirect.html</code> page </li> <li>host your <code>redirect.html</code> file from the same domain as your Embeddable javascript file</li> <li>update your redirect Uri to point to your custom <code>redirect.html</code> file</li> </ul>"},{"location":"support/","title":"Support and troubleshooting","text":""},{"location":"support/#limited-support-on-non-supported-browsers","title":"Limited support on non-supported browsers","text":"<p>RingCentral Embeddable is full tested on the latest versions of the following browsers:</p> <ul> <li>Google Chrome</li> <li>Microsoft Edge (a Chromium-based browser)</li> <li>Mozilla Firefox</li> </ul> <p>In all other browsers, support may be limited, especially browsers that do not support WebRTC. For those browsers you may see a warning indicating that the web phone is \"unavailable.\" For these browsers, you can modify your Calling settings and set your calling mode to either:</p> <ul> <li>Call with RingCentral Desktop app</li> <li>RingOut</li> </ul>"},{"location":"support/#granting-access-to-speakers-and-microphones","title":"Granting access to speakers and microphones","text":"<p>RingCentral Embeddable requests the <code>userMedia</code> permission from your browser in order to access a computer's microphone and speaker, necessary for making phone calls. There are three circumstances that will cause this request to fail:</p> <ul> <li>There is no microphone and speaker devices in your computer</li> <li>The end user does not click \"Allow\" when the request is made</li> <li>The widget is not served via HTTPS</li> </ul> <p>In Chrome or Firefox, browsers will block the <code>userMedia</code> request for a non-HTTPS website. One can forcibly circumvent this limitation in one of the following ways (this is not recommended for production use):</p> <ul> <li>Chrome users: goto <code>chrome://flags/#unsafely-treat-insecure-origin-as-secure</code> page, enable <code>Insecure origins treated as secure</code></li> <li>Firefox users: goto <code>about:config</code> page, enable <code>media.getusermedia.insecure</code></li> </ul>"},{"location":"support/#enabling-active-call-control-features","title":"Enabling active call control features","text":"<p>Active Call Control feature uses new <code>CallControl</code> RESTful API to control RingCentral Call. With this API, users can control their calls on other devices in this widget. </p> <p>Before we start to use Active Call Control feature, need to add <code>CallControl</code> permission to your app in RingCentral Developer website. After permissions added, you can get the feature after re-login to the widget.</p> <p>Please submit a help ticket to add <code>CallControl</code> permission if you get any problem.</p>"},{"location":"support/#enabling-the-conference-calling-feature","title":"Enabling the conference calling feature","text":"<p>To enable Conference Call (3-way-calling) feature, please add <code>CallControl</code> permission to your app via the RingCentral Developer console.  If your app has already been graduated and you need help, please submit a help ticket and we can assist. After the permission is added you can obtain the feature after you re-login to the widget.</p> <p></p>"},{"location":"versions/","title":"Loading a specific version of RingCentral Embeddable","text":""},{"location":"versions/#using-the-latest-build","title":"Using the latest build","text":"<p>We prefer developers to load the latest version of RingCentral Embeddable. This is the default behavior when you load Embeddable via a CDN and do not reference a specific version number, or if you use the RingCentral Embeddable embed tool to generate your embed code. Using the latest build ensures that your application will automatically receive updates along with any new bug fixes. </p>"},{"location":"versions/#loading-older-versions","title":"Loading older versions","text":"<p>Developers wishing to load a specific and fixed version of RingCentral Embeddable can do so by plugging their desired version into the following URL format:</p> <pre><code>https://apps.ringcentral.com/integration/ringcentral-embeddable/&lt;version number&gt;\n</code></pre> <p>For example:</p> <ul> <li><code>https://apps.ringcentral.com/integration/ringcentral-embeddable/1.4.1</code></li> <li><code>https://apps.ringcentral.com/integration/ringcentral-embeddable/1.9.3</code></li> </ul> <p>Loading a specific version may be considered more stable by some developers as their application will be insulated from new features, or unintended changes that may not be backwards-compatible. </p> <p>Update your Redirect URI to match</p> <p>Starting with version <code>1.2.0</code>, please note that the redirect uri of Embeddable must be changed to match the version you are loading. For example:</p> <p><code>https://apps.ringcentral.com/integration/ringcentral-embeddable/1.4.1/redirect.html</code></p>"},{"location":"versions/#example-loading-specific-version-via-javascript","title":"Example: loading specific version via Javascript","text":"<pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/1.4.1/adapter.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"config/","title":"Configuring RingCentral Embeddable","text":"<p>Listed below are all supported parameters that can be configured for RingCentral Embeddable. For those parameters that warrant greater explanation a link has been provided to content where you can learn more about using the parameter properly. </p> Parameter Default Description <code>appServer</code> production Sets the environment in which Embeddable will run. See Setting your environment. <code>authorizationCode</code> null See Alternative auth methods. <code>authorizationCodeVerifier</code> null See Alternative auth methods. <code>clientId</code> null Sets the client Id credential of your Embeddable application. Useful in removing the FOR DEMO PURPOSES ONLY banner. See Using a custom client ID. <code>clientSecret</code> None Deprecated. Sets the client secret of your application when using Authorization code grant type. See Alternative auth methods. <code>defaultCallWith</code> <code>browser</code> See Calling features. <code>defaultDirection</code> <code>right</code> Allowed values are \"left\" and \"right\". See Embeddable Badge. <code>disableMessages</code> False Disable messages feature. <code>disableReadText</code> False Disable SMS and read text feature. <code>disableCall</code> False Disable call-related features. <code>disableCallHistory</code> False Disable call history. <code>disableContacts</code> False Disable contacts feature. <code>disableMeeting</code> False Disable meeting feature. <code>disableGlip</code> True Before we start to use Glip API, need to add <code>Glip</code> or <code>Team Messaging</code> permission to your app in RingCentral Developer website. Also, for testing with a sandbox user, user needs to first login to https://app.devtest.ringcentral.com <code>disableMinimize</code> False By default, we provide Minimize button at app header to minimize the widget. <code>disconnectInactiveWebphone</code> False See Working with multiple tabs. <code>enableAnalytics</code> False See Custom analytics. <code>enableNoiseReductionSetting</code> False See Noise reduction. <code>enablePopup</code> False See Customize pop-up window. <code>enableRingtoneSettings</code> False For when call is ringing, app will play default ringtone. But we also support to customize ringtone. By enabled, user can get ringtone settings at settings page. Supported after v1.6.3 <code>enableSMSTemplate</code> False See SMS templates. <code>jwt</code> None See Alternative auth methods. <code>multipleTabsSupport</code> False See Working with multiple tabs. <code>newAdapterUI</code> False See Embeddable Badge. <code>popupPageUri</code> null See Customize pop-up window. <code>prefix</code> null See Customize prefix. <code>redirectUri</code> null See Customize redirectUri. <code>showSignUpButton</code> False <code>stylesUri</code> null See Customize look and feel through CSS. <code>userAgent</code> null See Customize X-User-Agent. <code>enableAudioInitPrompt</code> null See Audio. <code>enableLoadMoreCalls</code> null Support to load old call history (more than 7 days). Supported from v2.1.0 <code>enableSharedMessages</code> null Support to receive call queue SMS. Supported from v2.3.0"},{"location":"config/audio/","title":"Audio","text":"<p>When the calling setting is configured to \"Browser\", the widget utilizes the browser's default audio and microphone devices for capturing audio and playing ringtones or call voices. Users can also change the audio device via audio settings page.</p>"},{"location":"config/audio/#audio-output","title":"Audio output","text":"<p>Due to browser limitations, the widget can only play audio after user interacts with it. Therefore, an audio initialization is required to enable ringtone playback for incoming calls. Users can initialize audio by interacting with any button within the widget.</p> <p>And developer can enable <code>Audio Initialization</code> banner to remind user to initialize audio. The banner will be displayed at the top of the widget.</p> <p>2.1.0</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?enableAudioInitPrompt=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?enableAudioInitPrompt=1\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p></p>"},{"location":"config/audio/#audio-input","title":"Audio input","text":"<p>Access to a microphone device is essential for the widget to capture audio. If the widget cannot access the microphone, it will display a <code>Web Phone Unavailable</code> badge:</p> <p></p> <p>There are some reasons the widget might fail to access the microphone:</p>"},{"location":"config/audio/#user-permission","title":"User permission","text":"<p>The user must grant permission for the widget to access the microphone. If permission is denied, the widget will be unable to capture audio. When the user clicks on the <code>Web Phone Unavailable</code> badge, the browser will prompt a dialog requesting microphone access.</p>"},{"location":"config/audio/#no-microphone-device","title":"No microphone device","text":"<p>If the user's device does not have a microphone, the widget will be unable to capture audio. Users can connect an external microphone to resolve this issue.</p>"},{"location":"config/audio/#http-protocol","title":"HTTP protocol","text":"<p>Microphone access is only permitted over secure connections (HTTPS). If the website is not using HTTPS, the browser will prevent the widget from accessing the microphone.</p>"},{"location":"config/audio/#permissions-policy","title":"Permissions-Policy","text":"<p>For security reasons, some websites may implement a Permissions-Policy header that restricts microphone usage. If such a header is present, the widget will only be able to access the microphone if the policy explicitly permits it. The header should be formatted as follows:</p> <pre><code>Permissions-Policy: microphone=(\"https://apps.ringcentral.com\" \"self\")\n</code></pre>"},{"location":"config/badge/","title":"Embeddable badge","text":"<p>In adapter JS way, our codes will generate a <code>RingCentral Badge</code> in web page by default:</p> <p></p> <p>In latest version, we implement a new dock UI:</p> <p></p>"},{"location":"config/badge/#changing-the-location-of-the-badge","title":"Changing the location of the badge","text":"<p>Use the <code>defaultDirection</code> configuration parameter to dock the badge either the <code>left</code> or <code>right</code> of the window. </p>"},{"location":"config/call-settings/","title":"Interact with Calling Settings","text":"<p>In RingCentral Embeddable widget, we provide 4 calling options in <code>Calling Setting</code> page.</p> <ul> <li>Browser - make and receive calls using your computer\u2019s microphone and speaker based on browser</li> <li>RingCentral App - make and receive calls using your <code>RingCentral</code> desktop app</li> <li>RingCentral Phone - make and receive calls using your <code>RingCentral Phone</code> desktop app</li> <li>RingOut</li> </ul> <p>For RingOut mode, users also need to set <code>My Location</code> phone number. So when user creates a call, RingCentral will first call user's location phone number, then call correspondent's phone number. If user enables <code>Prompt me to dial 1 before connecting the call</code>, RingCentral will only call correspondent's phone number after user dials 1. RingCentral phone number without digital line can't be <code>My Location</code> phone number. You can also use your physical mobile number or <code>your_ringcentral_main_company_number*extension</code> number as <code>My Location</code> phone number if your extension doesn't own a digital line number. Please refer to here for more detailed information. </p> <p>For <code>RingCentral App</code>, <code>RingCentral Phone</code>, <code>RingOut</code>, calls are on other devices, the widget can get call event and information from APIs. And it is recommended to enable active call control, so user can also control the call in widget.</p>"},{"location":"config/call-settings/#default-option","title":"Default option","text":"<p>To set default <code>callWith</code> option:</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?defaultCallWith=browser\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?defaultCallWith=browser\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>There are 4 options for <code>defaultCallWith</code>: </p> <ul> <li>browser</li> <li>jupiter</li> <li>softphone</li> <li>ringout</li> </ul> <p>They are short names of <code>Browser</code>, <code>RingCentral App</code>, <code>RingCentral Phone</code>, <code>RingOut</code>.</p>"},{"location":"config/call-settings/#calling-settings-updated-event","title":"Calling settings updated event","text":"<p>Event fired when user changed <code>call with</code> option in calling settings page:</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-calling-settings-notify':\n        // get calling setting in here\n        console.log(data);\n        // {\n        //   type: 'rc-calling-settings-notify',\n        //   callWith: 'ringout',\n        //   fromNumbers: [], // show after enableFromNumberSetting flag set\n        //   myLocation: '+11111111', // show after showMyLocationNumbers flag set\n        //   myLocationNumbers: [], // show after showMyLocationNumbers flag set\n        // }\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"config/call-settings/#enable-call-from-number-setting","title":"Enable call from number setting","text":"<p>In widget, user can also select <code>From</code> number when make a browser call. For developers who also want to set <code>From</code> number programmatically, we need to enable from number settings:</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?enableFromNumberSetting=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?enableFromNumberSetting=1\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>After enabled, we can receive <code>From</code> number list in calling settings updated event when <code>callWith</code> is <code>browser</code>.</p>"},{"location":"config/call-settings/#show-my-location-numbers","title":"Show my location numbers","text":"<p>1.8.1</p> <p>In <code>RingOut</code> mode, user need to set <code>My Location</code> number to receive first-leg call. For developers who also want to get user's known location numbers programmatically, we need to set <code>showMyLocationNumbers</code> flag firstly:</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?showMyLocationNumbers=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?showMyLocationNumbers=1\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>After enabled, we can receive <code>myLocation</code> and <code>myLocationNumbers</code> in calling settings updated event.</p>"},{"location":"config/call-settings/#update-calling-settings","title":"Update Calling settings","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-calling-settings-update',\n  callWith: 'softphone',\n  // myLocation: '+1111111111', // required for ringout\n  // ringoutPrompt: true, // required for ringout\n  // fromNumber: '+1111111111', // set from number when callWith is browser\n}, '*');\n</code></pre> <p>For <code>fromNumber</code>, the number should be from <code>fromNumbers</code> list in calling settings event, or <code>anonymous</code> for <code>Blocked</code> from number.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-calling-settings-update',\n  fromNumber: 'anonymous',\n}, '*');\n</code></pre>"},{"location":"config/client-id/","title":"Using a custom client ID with RingCentral Embeddable","text":"<p>Upon successfully registering your application you will be provided with a unique client ID to identify your application on the network. </p>"},{"location":"config/client-id/#develop-your-application-in-sandbox","title":"Develop your application in sandbox","text":"<p>Before you can deploy your newly created application to production and remove the FOR DEMO PURPOSES ONLY banner, you will need to point RingCentral Embeddable at RingCentral's Developer sandbox environment. </p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    var clientId = \"YOUR CLIENT ID\";\n    var appServer = \"https://platform.devtest.ringcentral.com\"\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?clientId=\"+clientId+\"&amp;=appServer=\"+appServer;\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\"\n    src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?clientId=your_app_client_id&amp;appServer=https://platform.devtest.ringcentral.com\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p><code>appKey</code> and <code>appSecret</code> have been renamed</p> <p>Starting in version <code>v1.4.0</code>, <code>appKey</code> has been renamed to <code>clientId</code> and <code>appSecret</code> has been renamed to <code>clientSecret</code>.</p>"},{"location":"config/client-id/#graduate-your-app","title":"Graduate your app","text":"<p>Use in production</p> <p>Currently, new created RingCentral app will go to production directly. You don't need this section now.</p> <p>Sandbox is used by developers when building and testing applications. In order to use the app in production, developers must \"graduate\" their app. For RingCentral Embeddable apps, the following should be done in sandbox to quality for graduation:</p> <ul> <li>Send more than 5 SMS messages</li> <li>Send more than 5 internal messages (SMS message to extension number in current account)</li> <li>Read more than 5 unread inbound messages</li> <li>Update presence more than 5 times in setting page</li> <li>Go to Contacts page, and click refresh button more than 5 times</li> <li>Login and logout more than 5 times</li> <li>Make 5 outbound web phone (Browser based) calls</li> <li>Make 5 inbound web phone (Browser based) calls</li> <li>Make 5 Ringout calls</li> <li>Control(end/hold) Ringout call in widget more than 5 times in widget</li> </ul> <p>Having difficulty graduating your app?</p> <p>Please create developer support ticket if you experience issues during the app graduation process.</p>"},{"location":"config/client-id/#update-your-client-id-and-server-url","title":"Update your client ID and server URL","text":"<p>Once you have successfully graduated your app, be sure to update the <code>clientID</code> and <code>serverUrl</code> your instance of Embeddable points to in order to run successfully in production. </p>"},{"location":"config/environment/","title":"Setting your environment","text":"<p>RingCentral supports two different environments in which applications can run. These two environments are:</p> <ul> <li>Production. This is the primary environment for normal RingCentral operations. </li> <li>Sandbox. This is an environment set aside exclusively for developers to build and test applications before making them available in production. </li> </ul> <p>By default, RingCentral Embeddable's <code>appServer</code> configuration parameter points to production. </p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    var clientId = \"YOUR CLIENT ID\";\n    var appServer = \"https://platform.devtest.ringcentral.com\"\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?clientId=\"+clientId+\"&amp;=appServer=\"+appServer;\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\"\n        src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?clientId=your_app_client_id&amp;appServer=https://platform.devtest.ringcentral.com\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p><code>appKey</code> and <code>appSecret</code> have been renamed</p> <p>Starting in version <code>v1.4.0</code>, <code>appKey</code> has been renamed to <code>clientId</code> and <code>appSecret</code> has been renamed to <code>clientSecret</code>.</p>"},{"location":"config/multiple-tabs/","title":"Multiple Tabs","text":"<p>For the Embeddable widget, it supports to run in multiple tabs, and will share the same storage and login status. But widgets in different tabs are still different instances. </p> <p>When calling mode is set into Browser, widgets will create web phone connection in every widget instance. In our server-side, we have limitation of 5 phone connection. So when user selects <code>Browser</code> to make call, we only support to open tabs that no more than 5.</p>"},{"location":"config/multiple-tabs/#option-1-have-only-connection-in-first-connected-tab","title":"Option 1: Have only connection in first connected tab","text":"<p>To resolve 5 tab limitation issue for multiple tabs (more than 5), we have this option to make only a web phone connection in multiple tabs.</p>"},{"location":"config/multiple-tabs/#core-idea","title":"Core idea","text":"<ol> <li>Web phone connection is only connected in first connected tab.</li> <li>When user has a call in second tab or third tab etc, voice transmission is happened in first tab. Second tab only has web phone UI.</li> <li>When user controls call in second tab, control command sent to first tab to execute.</li> <li>When user closes first tab, second tab becomes first opened tab. Web phone will be connected in this tab.</li> <li>Web phone states are shared with local storage between different tabs.</li> <li>Use localStorage as message channel between different tabs.</li> </ol> <p>This feature is in beta, we need more tests and feedback about it. It only works after v1.5.0.</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?multipleTabsSupport=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?multipleTabsSupport=1\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>Known issues</p> <ul> <li>For Safari and Firefox, users need to go back to first opened tab to allow microphone permission for every call.</li> <li>For Chrome, user need to go back to first opened tab to allow microphone permission if user hasn't allowed microphone permission.</li> <li>Web phone call session notification happens at all tabs with the widget.</li> <li>Web phone call muted event does not work at no web phone connection tabs. </li> <li>For Chrome and Firefox, browser may throttle or unload inactive (5 mins) tabs to make this feature broken.</li> </ul>"},{"location":"config/multiple-tabs/#option-2-disconnect-inactive-web-phone","title":"Option 2: disconnect inactive web phone","text":"<p>For 5 tab limitation, we support to disconnect web phone connection in inactive tabs. So user can open more than 5 tabs, and not more than 5 active tabs. </p>"},{"location":"config/multiple-tabs/#core-idea_1","title":"Core idea:","text":"<ol> <li>When user goes to new tab and web phone is connected, web phone connection in inactive tabs will be disconnected.</li> <li>When user goes back to inactive tab, the tab became active and widget will reconnect web phone connection.</li> <li>When user has active calls in inactive tabs, web phone connection in inactive tabs will be kept unless all calls ended.</li> <li>User can control calls from inactive tabs by Call Control RESTful API in active tab. And can switch calls into current active tab.</li> </ol> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?disconnectInactiveWebphone=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?disconnectInactiveWebphone=1\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>Known issues</p> <ul> <li>App will show connecting badge a while after user change active tab</li> <li>Performance issue when user change active tab fast</li> <li>At Firefox, app can't disconnect web phone successfully at active page unloaded. So it maybe show too many connection error.</li> </ul>"},{"location":"config/noise-reduction/","title":"Noise reduction","text":"<p>1.10.0</p> <p>Currently in beta.</p> <p>Noise reduction is a self-descriptive feature that when enabled, filters out background noise present in the user's environment to create a clearer, easier-to-hear audio stream for people on the other end of a call. Noise reduction is currently only supported within the Google Chrome and Microsoft Edge browsers.</p>"},{"location":"config/noise-reduction/#how-to-enable-noise-reduction","title":"How to enable noise reduction","text":"<p>Noise reduction is only supported when loading Embeddable from <code>apps.ringcentral.com</code></p> <p>Noise reduction is not supported if you are loading the Embeddable library from a Github domain. The embeddable library must be loaded from <code>https://apps.ringcentral.com</code> domain. Please check your source code and migrate to a more new recent build hosted at ringcentral.com.\"</p> <p>1.10.0</p> <p>At version <code>1.10.x</code>, noise reduction is disabled by default. To enable noise reduction, developer need to pass <code>enableNoiseReductionSetting</code> at query parameters.</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?enableNoiseReductionSetting=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" \n  src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?enableNoiseReductionSetting=1\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>2.0.0</p> <p>From <code>v2.0.0</code>, noise reduction feature is enabled by default for supported browsers. User can disable it manually in settings page. If you want to disable and remove the feature, please check How to remove noise reduction feature.</p>"},{"location":"config/noise-reduction/#how-to-remove-noise-reduction-feature","title":"How to remove noise reduction feature","text":"<p>2.0.0</p> <p>Noise reduction settings will be showed in settings page automatically from <code>v2.0.0</code>. If you don't want to use noise reduction feature, you can remove it by setting <code>disableNoiseReduction</code> at query parameters.</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?disableNoiseReduction=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" \n  src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?disableNoiseReduction=1\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"config/popup-window/","title":"Popup the widget in a standalone window","text":"<p>Support to open the widget in a popup window, so the widget is opened at a standalone window. User can close web page that embed the widget, and call will not be ended, and still active at popup window.</p> <p>For <code>Chrome (from 117)</code>, Safari and Firefox, iframe inside different domain is isolated. As default popup window's domain is different as the page embedded, need to host the popup window in same domain origin as the page embedded to have this feature work.</p> Javascript <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?enablePopup=1&amp;multipleTabsSupport=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>After enabled, user will get a popup button at header:</p> <p></p> <p>The feature is based on Webphone Multiple Tabs solution 1, so <code>multipleTabsSupport</code> need to be  enabled. If you have enable <code>disconnectInactiveWebphone</code>, please remove it. Before user open popup window, web phone connection is built at first opened tab. After user open popup window, web phone connection is built at popup window.</p>"},{"location":"config/popup-window/#to-check-if-popup-window-opened","title":"To check if popup window opened","text":"<p>From v1.8.0:</p> <pre><code>RCAdapter.isWindowPoppedUp().then((opened) =&gt; {...})\n</code></pre> <p>Known issues</p> <ul> <li>App can't make a opened popup window into desktop top (Browser limitation)</li> <li>App will send Web phone call session notification at every tabs</li> <li>User need to focus at popup window when start or answer a call at popup window for microphone permission at Firefox</li> </ul>"},{"location":"config/popup-window/#host-the-popup-window","title":"Host the popup window","text":"<p>For some reason, developers need to host the popup HTML file by themselves. For example, if developer want to add Third Party service register and response into the widget, it is required to host the popup HTML file in your domain, and add your script inside the HTML file. It can be also used for resolve cross-origin domain issue.</p> <p>In this case, we can config the popup button to open your own popup HTML file URI:</p> Javascript <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?enablePopup=1&amp;popupPageUri=your_popup_html_file_uri\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>The HTML file need to be based on code of this file. Then update the <code>adapter.js</code> src into absolute address in the file:</p> <pre><code>&lt;script src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Then add your own script in the file.</p>"},{"location":"config/prefix/","title":"Customize Prefix","text":"<p>We provide default prefix <code>rc-widget</code> in the widget. It will used at iframe id prefix and storage key prefix, such as <code>rc-widget-adapter-frame</code> and <code>rc-widget-GlobalStorage-rateLimiterTimestamp</code>.</p> <p>Some developers wants to customize the prefix, so the widget can support to have different user storage data. We provide prefix param to support this feature:</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?prefix=your_prefix\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?prefix=your_prefix\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>After that the widget iframe id will changed to <code>your_prefix-adapter-frame</code>. And user data will be storaged at <code>you_prefix</code> namespace.</p> <p>For implicit grant flow, we use cookie to refresh the token, so it don't support different accounts in same browser in different tabs. If you want to support different accounts in different tabs or domains in same browser, you need to use authrization code flow.</p>"},{"location":"config/redirect-uri/","title":"Customize Redirect Uri","text":"<p>In authorization code flow, it will require a valid redirect uri that developer set in developers account. This app offers a default redirect uri option that you can use, <code>https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/redirect.html</code>. And it also supports to config redirect uri.</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?redirectUri=your_redirect_uri\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?redirectUri=your_redirect_uri\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"config/redirect-uri/#hosting-a-custom-redirecthtml-file","title":"Hosting a custom <code>redirect.html</code> file","text":"<p>In your redirect page, you need to add following code to pass auth callback params to this app.</p> <pre><code>&lt;script&gt;\n  // Important: the origin is used for postMessage\n  // Set \"origin\" to the same domain as the Embeddable library\n  var origin = 'https://apps.ringcentral.com';\n  if (window.opener) {\n    // pass callbackUri to widget\n    window.opener.postMessage({\n      callbackUri: window.location.href,\n    }, origin);\n    window.close(); // close the login popup window\n  }\n&lt;/script&gt;\n</code></pre> <p>Be sure to host your redirect.html and Embeddable library from the same domain</p> <p>To comply with browser security policies meant to prevent XSS vulnerabilities, both your <code>redirect.html</code> file and the RingCentral Embeddable javascript file must be hosted from the same domain. If not, users will be unable to authenticate.</p>"},{"location":"config/setting-params/","title":"Setting RingCentral Embeddable configuration parameters","text":"<p>RingCentral Embeddable supports a number of different configuration parameters to modify the behavior of the library is key ways. Each parameter is set in one of two ways. </p>"},{"location":"config/setting-params/#via-script-tags-src-attribute","title":"Via script tag's <code>src</code> attribute","text":"<pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?parameterName=VALUE\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre>"},{"location":"config/setting-params/#via-iframes-href-attribute","title":"Via iframe's <code>href</code> attribute","text":"<pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" \n  src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?parameterName=VALUE\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"config/sms-settings/","title":"SMS settings","text":""},{"location":"config/sms-settings/#sms-settings","title":"SMS Settings","text":"<p>2.3.0</p> <p>When user sends SMS, the widgets allow user to select sender number in Compose Text page. And the widget also provides API to set the sender number.</p>"},{"location":"config/sms-settings/#sms-settings-updated-event","title":"SMS settings updated event","text":"<p>To receive the event, developer needs to enable it firstly:</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?enableSmsSettingEvent=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?enableSmsSettingEvent=1\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>To receive events:</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-sms-settings-notify':\n        // get sms setting in here\n        console.log(data);\n        // {\n        //   type: 'rc-sms-settings-notify',\n        //   senderNumber: '+11111111111', // sms sender number that user selected\n        //   senderNumbers: [], // available number list for SMS sender\n        // }\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"config/sms-settings/#update-sms-settings","title":"Update SMS settings","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-sms-settings-update',\n  senderNumber: '+11111111111', // the number must be one of sender numbers in setting notify event\n}, '*');\n</code></pre> <p>The sender number setting will only work for new SMS conversation. If user send SMS in a existing conversation, the widget will use previous sender number in the conversation. To go to SMS page by API, please follow here.</p>"},{"location":"config/sms-template/","title":"SMS template","text":"<p>2.0.0</p> <p>The SMS template feature is supported starting in version 2.0.0. This feature allows users to manage and utilize a set of shared pre-written messages in the SMS messages sent via RingCentral Embeddable. When enabled, users can:</p> <ul> <li>Select and apply an templated message in an SMS they are writing</li> <li>Create new SMS templates</li> <li>Access templates create by coworkers or administrators</li> </ul>"},{"location":"config/sms-template/#enable-sms-template","title":"Enable SMS template","text":"<p>First, you need to add <code>EditExtensions</code> permission into your RingCentral app in RingCentral developer portal.</p> <p>Then, you need to enable the SMS template feature in the widget. To enable it, you need to set <code>enableSMSTemplate</code> flag into the widget's URI. </p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?enableSMSTemplate=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?enableSMSTemplate=1\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"config/sms-template/#use-sms-template","title":"Use SMS template","text":"<p>After enabled, user should be able to see the SMS template tab SMS text input toolbar.</p> <p></p>"},{"location":"config/sms-template/#import-sms-template","title":"Import SMS template","text":"<p>The widget provides a API to import SMS template into the widget. You can use the following code to import SMS template into the widget.</p> Adapter JSJavascript <pre><code>RCAdapter.createSMSTemplate('Template name', 'Template text');\n</code></pre> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-message-request',\n  requestId: Date.now().toString(),\n  path: '/create-sms-template',\n  body: {\n    displayName: 'Template name',\n    text: 'Template text'\n  },\n}, '*');\n</code></pre>"},{"location":"config/styles/","title":"Customize look and feel through CSS","text":"<p>This is a online demo built with Game of Thrones Styles.</p> <p>Style file is defined here: </p> <p><code>https://embbnux.github.io/ringcentral-web-widget-styles/GameofThrones/styles.css</code></p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?stylesUri=https://embbnux.github.io/ringcentral-web-widget-styles/GameofThrones/styles.css\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?stylesUri=https://embbnux.github.io/ringcentral-web-widget-styles/GameofThrones/styles.css\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>See a live demo</p>"},{"location":"config/user-agent/","title":"Customize X-User-Agent","text":"<p>We provide default <code>X-User-Agent</code> header as <code>RingCentralEmbeddable/0.2.0 RCJSSDK/3.1.3</code> in RingCentral API request for SDK usage analysis in backend. In this API, developers can also provide their desired User Agent into widget.</p> <p>After that widget will change <code>X-User-Agent</code> header into <code>TestAPP/1.0.0 RingCentralEmbeddable/0.2.0 RCJSSDK/3.1.3</code> when send request to RingCentral Server.</p>"},{"location":"integration/","title":"Service integration features","text":"<p>After integrating the RingCentral Embeddable library into your web application, you can also integrate your own custom service into the CTI as well. This will allow you to associate an icon with contacts you synchronize into Embeddable via its API, or display a button to facilitate authorization with your service. In a nutshell, anywhere in Embeddable where the library allows you to modify or augment the user interface, requires you to first register your service so the Embeddable can properly indicate what features are native to the CTI, and which ones have been added by a third-party. </p>"},{"location":"integration/#registering-your-app-as-a-service-in-embeddable","title":"Registering your app as a service in Embeddable","text":"<p>The code below shows how to register your service. When you do so you will choose a name for your service, below we use <code>TestService</code>. You will use that exact same name when engaging with the service API features. You will register your service by using the <code>postMessage</code> API.</p> Registering your service via postMessage<pre><code>var registered = false;\nwindow.addEventListener('message', function (e) {\n  const data = e.data;\n  // Register when widget is loaded\n  if (data &amp;&amp; data.type === 'rc-login-status-notify' &amp;&amp; registered === false) {\n    registered = true;\n    document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n      type: 'rc-adapter-register-third-party-service',\n      service: {\n        name: 'TestService'\n      }\n    }, '*');\n  }\n});\n</code></pre>"},{"location":"integration/address-book/","title":"Integration contacts in your system into Embeddable","text":"<p>This feature requires you to register your app as a service first.</p>"},{"location":"integration/address-book/#show-contacts-on-embeddables-contacts-tab","title":"Show contacts on Embeddable's contacts tab","text":"<p>First you need to pass <code>contactsPath</code> when you register service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    contactsPath: '/contacts',\n    contactIcon: 'https://set_brand_icon.com/test.png', // optional, show brand icon in the top right of contact avatar \n  }\n}, '*');\n</code></pre> <p>Add a message event to respond to a contacts list event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/contacts') {\n      console.log(data);\n      // you can get page and syncTimestamp params from data.body\n      // query contacts data from third party service with page and syncTimestamp\n      // if syncTimestamp existed, please only return updated contacts after syncTimestamp\n      // response to widget:\n      const contacts = [{\n        id: '123456', // id to identify third party contact, need to be string\n        name: 'TestService Name', // contact name\n        type: 'TestService', // need to same as service name\n        phoneNumbers: [{\n          phoneNumber: '+1234567890',\n          phoneType: 'direct', // support: business, extension, home, mobile, phone, unknown, company, direct, fax, other\n        }],\n        company: 'CompanyName',\n        jobTitle: 'Engineer',\n        emails: ['test@email.com'],\n        profileImageUrl: 'https://avatar_uri', // optional, show avatar in Contacts page\n        deleted: false, // set deleted to true if you need to delete it in updated contacts\n      }];\n      // pass nextPage number when there are more than one page data, widget will repeat same request with nextPage increased\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: {\n          data: contacts,\n          nextPage: null,\n          syncTimestamp: Date.now()\n        },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p>Data from <code>contactsPath</code> will be displayed in the contacts tab inside Embeddable.</p> <p>Embeddable will request contacts data when widget is loaded and when user visit contacts page. In first request <code>syncTimestamp</code> is blank, so you need to provide full contacts data to widget. Please provide <code>syncTimestamp</code> when reponse to widget. In next contacts request widget will send you <code>syncTimestamp</code>, so you just need to provide updated contact since <code>syncTimestamp</code>.</p> <p>If you provide <code>nextPage</code> for <code>contactsPath</code> response, widget will repeat request with <code>page=\"${nextPage}\"</code> to get next page contacts data.</p> <p></p> <p>To trigger contact sync request in widget using the API:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-sync-third-party-contacts',\n}, '*');\n</code></pre>"},{"location":"integration/address-book/#show-contacts-search-result-in-the-dialers-receiver-input","title":"Show contacts search result in the dialer's receiver input","text":"<p>You must want to show related contacts result when user typing in callee input area. First you need to pass <code>contactSearchPath</code> when you register service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    contactSearchPath: '/contacts/search'\n  }\n}, '*');\n</code></pre> <p>Add a message event to response contacts search event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/contacts/search') {\n      console.log(data);\n      const searchedContacts = [{\n        id: '123456', // id to identify third party contact\n        name: 'TestService Name',\n        type: 'TestService', // need to same as service name\n        phoneNumbers: [{\n          phoneNumber: '+1234567890',\n          phoneType: 'direct', // support: business, extension, home, mobile, phone, unknown, company, direct, fax, other\n        }]\n      }];\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: {\n          data: searchedContacts\n        },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p></p>"},{"location":"integration/address-book/#show-matched-contact-in-the-call-history-or-incoming-call-page","title":"Show matched contact in the call history or incoming call page","text":"<p>In widget, we use contact matcher to match phone number to contact in calls page or incoming page. First you need to pass <code>contactMatchPath</code> when you register service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    contactMatchPath: '/contacts/match',\n    contactMatchTtl: 2 * 60 * 60 * 1000, // optional, contact match data cache deleted time in seconds, default is 2 hours, supported from v1.10.2\n    contactNoMatchTtl: 5 * 60 * 1000, // optional, contact match data expired in seconds, will re-match at next match trigger, default is 5 minutes, from v1.10.2\n  }\n}, '*');\n</code></pre> <p>Add a message event to response contacts matcher event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/contacts/match') {\n      console.log(data); // include phone number array that need to match\n      const matchedContacts = {\n        '+12165325078': [\n          {\n            id: '123456', // id to identify third party contact\n            type: 'TestService', // need to same as service name\n            name: 'TestService 1',\n            phoneNumbers: [{\n              phoneNumber: '+12165325078',\n              phoneType: 'direct', // support: business, extension, home, mobile, phone, unknown, company, direct, fax, other\n            }]\n          }\n        ]\n      };\n      // return matched contact object with phone number as key\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: {\n          data: matchedContacts\n        },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p></p>"},{"location":"integration/address-book/#trigger-contact-match-manually","title":"Trigger contact match manually","text":"<p>2.0.0</p> <p>If there are new contacts in your system, you can trigger contact match manually:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-trigger-contact-match',\n  phoneNumbers: [`phoneNumberInE164Format`],\n}, '*');\n</code></pre>"},{"location":"integration/address-book/#view-matched-contact-externally","title":"View matched contact externally","text":"<p>2.0.0</p> <p>You can also view matched contact in your system by clicking \"View contact details\" in the call history or inbox page. You need to pass <code>viewMatchedContactPath</code> when you register service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    // ...\n    contactMatchPath: '/contacts/match',\n    viewMatchedContactPath: '/contacts/view',\n  }\n}, '*');\n</code></pre> <p>Add a message event to response view matched contact event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    // ... match contact event\n    // ...\n    if (data.path === '/contacts/view') {\n      console.log(data.body); // contact info to view\n      // open contact detail page in your system\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: 'ok',\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/analytics/","title":"Enable analytics","text":"<p>Developers can implement their own custom event tracking with internal or third-party analytics systems using Embeddable's API. This feature is disabled by default. To enable analytics tracking, enable the <code>enableAnalytics</code> configuration parameter.</p>"},{"location":"integration/analytics/#listen-for-the-track-event","title":"Listen for the track event","text":"<pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-analytics-track':\n        // get analytics data\n        console.log('rc-analytics-track:', data.event, data.properties);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/api/","title":"Embeddable API for controlling and manipulating the UI","text":"<p>Embeddable provides an API that allows developers to control the UI and flow of the application via the embedded CTI. It is based on the postMessage API.</p>"},{"location":"integration/api/#active-call-control","title":"Active call control","text":"<p>  [ : 1.x]  </p> <p>Following APIs need to work with Web phone call event to get <code>callId</code>.</p>"},{"location":"integration/api/#answer-a-ringing-call","title":"Answer a ringing call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'answer',\n  callId: `call id`\n}, '*');\n// callId comes from web phone call event\n\n// answer the current ringing call, call id default is current ringing call id.\ndocument.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'answer',\n}, '*');\n</code></pre>"},{"location":"integration/api/#reject-a-ringing-call","title":"Reject a ringing call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'reject',\n  callId: `call id`\n}, '*');\n</code></pre>"},{"location":"integration/api/#to-voicemail-a-ringing-call","title":"To voicemail a ringing call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'toVoicemail',\n  callId: `call id`\n}, '*');\n</code></pre>"},{"location":"integration/api/#forward-a-ringing-call","title":"Forward a ringing call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'forward',\n  callId: `call id`,\n  options: {\n    forwardNumber: 'forward_number'\n  }\n}, '*');\n</code></pre>"},{"location":"integration/api/#hangup-a-call","title":"Hangup a call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'hangup',\n  callId: `call id`\n}, '*');\n\n// hangup current active call\ndocument.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'hangup',\n}, '*');\n</code></pre>"},{"location":"integration/api/#hold-a-call","title":"Hold a call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'hold',\n  callId: `call id`\n}, '*');\n</code></pre>"},{"location":"integration/api/#unhold-a-call","title":"Unhold a call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'unhold',\n  callId: `call id`\n}, '*');\n</code></pre>"},{"location":"integration/api/#transfer-a-call","title":"Transfer a call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'transfer',\n  callId: `call id`,\n  options: {\n    transferNumber: 'transfer_number'\n  }\n}, '*');\n</code></pre>"},{"location":"integration/api/#record-a-call","title":"Record a call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'startRecord',\n  callId: `call id`\n}, '*');\n</code></pre> <p>This will only work after the call has already started (Inbound call accepted/Oubound call connected)</p>"},{"location":"integration/api/#stop-record-a-call","title":"Stop record a call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'stopRecord',\n  callId: `call id`\n}, '*');\n</code></pre>"},{"location":"integration/api/#mute-a-call","title":"Mute a call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'mute',\n  callId: `call id`\n}, '*');\n</code></pre>"},{"location":"integration/api/#unmute-a-call","title":"Unmute a call","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'unmute',\n  callId: `call id`\n}, '*');\n</code></pre>"},{"location":"integration/api/#send-dtmf","title":"Send DTMF","text":"<p>2.3.0</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'dtmf',\n  callId: `call id`, // optional, current call id by default\n  options: {\n    dtmf: '101', // DTMF value\n  },\n}, '*');\n</code></pre>"},{"location":"integration/api/#closeopen-current-ringing-page","title":"Close/open current ringing page","text":"<p>2.2.1</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-control-call',\n  callAction: 'toggleRingingDialog',\n}, '*');\n</code></pre>"},{"location":"integration/api/#embeddable-widget","title":"Embeddable widget","text":""},{"location":"integration/api/#show-custom-alert-message","title":"Show custom alert message","text":"<p>1.8.6</p> <pre><code>const requestId = Date.now().toString();\ndocument.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-message-request',\n  requestId: requestId,\n  path: '/custom-alert-message',\n  alertMessage: 'Test info message',\n  alertLevel: 'info',\n  ttl: 5000 //5000ms =&gt; 5s\n}, '*');\n</code></pre> <p>Note: <code>alertLevel</code> can be <code>info</code>, <code>warning</code> or <code>danger</code>.</p> <p>2.0.0</p> <pre><code>const alertId = await RCAdapter.alertMessage({\n  message: 'Test info message',\n  level: 'info',\n  ttl: 5000 //5000ms =&gt; 5s, 0 for infinite\n});\n// Dismiss the alert message\nRCAdapter.dismissMessage(alertId); // dismiss the alert message\n// Dismiss all alert messages\nRCAdapter.dismissMessage();\n</code></pre> <p>2.1.0</p> <p>Alert with details <pre><code>const alertId = await RCAdapter.alertMessage({\n  message: 'Can not log phone call',\n  ttl: 0,\n  level: 'danger',\n  details: [{\n    title: 'Description',\n    items: [{\n      id: '1',\n      type: 'text',\n      text: 'This is a longer more descriptive explanation of the problem that can expand over multiple lines.'\n    }],\n  }, {\n    title: 'Error from CRM',\n    items: [{\n      id: '1',\n      type: 'text',\n      text: 'OAU-1973 Contact not found'\n    }],\n  }, {\n    title: 'Actions',\n    items: [{\n      id: '1',\n      type: 'link',\n      text: 'Need help? Ask out community.',\n      href: 'https://community.ringcentral.com'\n    }, {\n      id: '2',\n      type: 'link', // when not href set, it will send a event with [button event](./sms-toolbar-button.md)\n      text: 'Resolve logging conflict',\n    }]\n  }]\n})\n</code></pre></p>"},{"location":"integration/api/#minimizehideremove-the-widget","title":"Minimize/Hide/Remove the widget","text":"<p>Only for Adapter JS way:</p> <p>Minimize:</p> <pre><code>RCAdapter.setMinimized(true);\n// RCAdapter.setMinimized(false); // maximize\n</code></pre> <p>You can also disable <code>Minimize</code> feature by following here.</p> <p>Hide:</p> <pre><code>RCAdapter.setClosed(true);\n// RCAdapter.setClosed(false); // Show\n</code></pre> <p>Remove:</p> <pre><code>RCAdapter.dispose();\n</code></pre>"},{"location":"integration/api/#popup-the-widget","title":"Popup the widget","text":"<p>Only for Adapter JS way and popup window feature enabled:</p> <pre><code>RCAdapter.popupWindow();  // popup the widget in a standalone window\n</code></pre>"},{"location":"integration/api/#login-and-authorization","title":"Login and authorization","text":""},{"location":"integration/api/#log-out-user","title":"Log out user","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-logout'\n}, '*');\n</code></pre>"},{"location":"integration/api/#trigger-login-button-click","title":"Trigger Login button click","text":"<p>App will open login popup window after getting this command. Follow here to disable popup window, and receive oauth uri.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-login'\n}, '*');\n</code></pre> <p>This command only works when user is not logged in</p>"},{"location":"integration/api/#navigation","title":"Navigation","text":""},{"location":"integration/api/#open-the-dialer-and-start-a-call","title":"Open the dialer and start a call","text":"<p>Find the widget iframe and use <code>postMessage</code> to send command and data:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-new-call',\n  phoneNumber: `phone number`,\n  toCall: true,\n}, '*');\n</code></pre> <p>This feature can be used for <code>Click to Dial</code>. If you set <code>toCall</code> to ture, it will start the call immediately.</p> <p>If you are using Adapter JS way, just you can just call <code>RCAdapter.clickToCall('phonenumber')</code>.</p> <p>Here is tutorial to use RingCentral C2D library to quick implement <code>Click to Dial</code> feature.</p>"},{"location":"integration/api/#navigate-to-arbitrary-path","title":"Navigate to arbitrary path","text":"<p>Navigate to path:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-navigate-to',\n  path: '/messages', // '/meeting', '/dialer', '//history', '/settings'\n}, '*');\n</code></pre> <p>Navigate back to previous path:</p> <p>2.0.0</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-navigate-to',\n  path: 'goBack',\n}, '*');\n</code></pre>"},{"location":"integration/api/#go-to-the-sms-tab","title":"Go to the SMS tab","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-new-sms',\n  phoneNumber: `phone number`,\n}, '*');\n</code></pre>"},{"location":"integration/api/#go-to-sms-conversation-for-specific-phone-number","title":"Go to SMS conversation for specific phone number","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-new-sms',\n  phoneNumber: `phone number`,\n  conversation: true, // will go to conversation page if conversation existed\n}, '*');\n</code></pre>"},{"location":"integration/api/#go-to-sms-page-with-prefilled-text","title":"Go to SMS page with prefilled text","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-new-sms',\n  phoneNumber: `phone number`,\n  text: `your text`\n  }]\n}, '*');\n</code></pre> <p>If you are using Adapter JS way, just you can just call <code>RCAdapter.clickToSMS('phonenumber', 'text')</code>.</p>"},{"location":"integration/api/#auto-populate-sms-conversation-text","title":"Auto-populate SMS conversation text","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-auto-populate-conversation',\n  text: `your text`\n}, '*');\n</code></pre> <p>This only works when user is already on the SMS conversation detail page. It will add the specified text into user's conversation input.</p>"},{"location":"integration/api/#go-to-sms-page-with-prefilled-imageattachment","title":"Go to SMS page with prefilled image/attachment","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-new-sms',\n  phoneNumber: `phone number`,\n  attachments: [{\n    name: 'test.txt',\n    content: 'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D', // base64 encoded data URI\n    }], // optional for sending MMS message with attachments\n  }]\n}, '*');\n</code></pre> <p>This only works when user is already on the SMS conversation detail page. It will add the specified text into user's conversation input.</p>"},{"location":"integration/api/#schedule-a-meeting","title":"Schedule a meeting","text":"<p>Your applicaton needs to have the \"Meeting\" application scope for this to work.</p> <pre><code>// meeting info\nconst meetingBody = {\n  topic: \"Embbnux Ji's Meeting\",\n  meetingType: \"Scheduled\",\n  password: \"\",\n  schedule: {\n    startTime: 1583312400368,\n    durationInMinutes: 60,\n    timeZone: {\n      id: \"1\"\n    }\n  },\n  allowJoinBeforeHost: false,\n  startHostVideo: false,\n  startParticipantsVideo: false,\n  audioOptions: [\n    \"Phone\",\n    \"ComputerAudio\"\n  ]\n};\n\n// send a request to schedule meeting\nconst requestId = Date.now().toString();\ndocument.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-message-request',\n  requestId: requestId,\n  path: '/schedule-meeting',\n  body: meetingBody,\n}, '*');\n\n// listen response\nwindow.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-adapter-message-response') {\n    if (data.responseId === requestId) {\n      console.log(data.response);\n    }\n  }\n});\n</code></pre>"},{"location":"integration/api/#set-presence","title":"Set presence","text":"<p>1.8.2</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-set-presence',\n  userStatus: 'Available', // Offline, Busy, Available\n  dndStatus: 'TakeAllCalls', // TakeAllCalls, DoNotAcceptAnyCalls, DoNotAcceptDepartmentCalls, TakeDepartmentCallsOnly\n}, '*');\n</code></pre> <p>To get current presence status please refer this event.</p>"},{"location":"integration/api/#update-ringtone-settings","title":"Update ringtone settings","text":"<p>2.0.0</p> <p>Set ringtone audio</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-update-ringtone',\n  name: 'CoolRingTone', // Ringtone name\n  uri: 'https://xxx.wav', // Ringtone URI, support http/https and base64 data URI\n}, '*');\n</code></pre> <p>Set ringtone volume</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-update-ringtone',\n  volume: 0.5, // 0 - 1.0\n}, '*');\n</code></pre> <p>If you are using Adapter JS way, just you can just call <code>RCAdapter.updateRingtone({ name, uri, volume })</code>.</p>"},{"location":"integration/authorization/","title":"Alternative authorization methods","text":"<p>RingCentral Embeddable supports the Authorization code with PKCE grant type to facilitate user's logging into RingCentral. This is the recommended authorization method for applications like those built on top of RingCentral Embeddable. Therefore, no changes are necessary to enable authorization and usage of RingCentral Embeddable. However, some developers in specific and rare circumstances may wish to utilize a different method of authorization. This guide will instruct developers on how to do so. </p> <p>Access tokens are stored in a browser's local storage</p> <p>In the Authorization code with PKCE flow, a user's access token is managed safely and securely in the browser's local storage for that user. If a user is inactive for more than 7 days, then the user will be automatically logged out. Embeddable automatically refreshes access tokens when API requests are made to the RingCentral API, so as long as the user remains active, they will not be required to login again. Users that are inactive for longer than seven days, however, will be required to login to RingCentral again. </p>"},{"location":"integration/authorization/#jwt-flow","title":"JWT flow","text":"<p>Developers can login to RingCentral Embeddable using the JWT auth flow if they so choose. However, doing so means that every user of RingCentral Embeddable will be logged in as the same user, which may undermine the value of RingCentral's audit trail and security practices. Please use at your own risk. </p> <p>JWT auth flow in Embeddable is experimental</p> <p>While the JWT auth flow itself is not experimental, its usage within the context of RingCentral Embeddable is. This is due to the fact that using JWT in this way is beyond the intended design of Embeddable, and could be problematic in some circumstances. </p> <p>JWT also requires you to expose your client secret, which if exposed publicly could expose you to some security risks. </p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    var clientId = \"&lt;YOUR CLIENT ID&gt;\";\n    var clientSecret = \"&lt;YOUR CLIENT SECRET&gt;\";\n    var jwt = \"&lt;YOUR JWT TOKEN&gt;\";\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?\"+\n        \"clientId=\"+clientId+\"&amp;clientSecret=\"+clientSecret+\"&amp;jwt=\"+jwt;\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" \n    src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?clientId=ringcentral_app_client_id&amp;clientSecret=ringcentral_app_client_secret&amp;jwt=your_jwt_token\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"integration/authorization/#authorization-code-flow","title":"Authorization code flow","text":"<p>Authorization code flow has been deprecated</p> <p>RingCentral Embeddable utilizes the Authorization Code with PKCE grant flow by default since <code>v1.4.0</code>. Developers are required to upgrade.</p> <p>If for debugging purposes you need to utilize this mode or authorization, developers can specify their app's client secret using the <code>clientSecret</code> URI parameter via a script tag's <code>src</code> attribute, or an iframe's <code>href</code> attribure. </p> <p>Pass RingCentral authorization code and code verifier:</p> Javascriptiframe <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    var clientId = \"&lt;YOUR CLIENT ID&gt;\";\n    var clientSecret = \"&lt;YOUR CLIENT SECRET&gt;\";\n    var authCode = \"&lt;AUTH CODE&gt;\";\n    var authCodeVerifier = \"&lt;AUTH CODE VERIFIER&gt;\";\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?\"+\n       \"clientId=\"+clientId+\"&amp;authorizationCode=\"+authCode+\"&amp;authorizationCodeVerifier=\"+authCodeVerifier;\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;iframe width=\"300\" height=\"500\" id=\"rc-widget\" allow=\"microphone\" src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html?clientId=ringcentral_app_client_id&amp;authorizationCode=ringcentral_authorization_code&amp;authorizationCodeVerifier=code_verifier_for_the_code\"&gt;\n&lt;/iframe&gt;\n</code></pre>"},{"location":"integration/authorization/#postmessage-way","title":"PostMessage way","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-authorization-code',\n  callbackUri: \"http://localhost:8080/redirect.html?\"+\n     \"code=authorization_code&amp;state=MTU5OTE0MzE5NTQ5OQ%3D%3D&amp;code_verifier=\"\n}, '*');\n</code></pre> <p><code>authorizationCodeVerifier</code> query parameter is only supported after <code>v1.8.1</code></p> <p><code>authorizationCodeVerifier</code> is not required if you use the authorization URI generated from the login popup event.</p> <p>For authorization code flow (without PKCE), <code>clientId</code> and <code>clientSecret</code> is required with <code>authorizationCode</code>. The app needs <code>clientSecret</code> to exchange token. The authorization code should be generated with same RingCentral app client id and secret.</p>"},{"location":"integration/call-logging/","title":"Log a call in your service","text":"<p>This feature requires you to register your app as a service first.</p>"},{"location":"integration/call-logging/#add-call-log-buttonicon-in-call-history-tab","title":"Add call log button/icon in call history tab","text":"<p>First you need to pass <code>callLoggerPath</code> and <code>callLoggerTitle</code> when you register service.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    callLoggerPath: '/callLogger',\n    callLoggerTitle: 'Log to TestService',\n    // callLoggerAutoSettingLabel: 'Auto log calls', // optional, customized the auto log setting label\n    // recordingWithToken: 1\n  }\n}, '*');\n</code></pre> <p>After registered, you can get a <code>Log to TestService</code> in calls page, and <code>Auto log calls</code> setting in setting page</p> <p></p> <p>Then add a message event to response call logger button event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/callLogger') {\n      // add your codes here to log call to your service\n      console.log(data);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p>This message event is fired when user clicks <code>Log</code> button. Or if user enables <code>Auto log calls</code> in settings, this event will be also fired when a call is started and updated.</p> <p>In this message event, you can get call information in <code>data.body.call</code>. When call is recorded and recording file is generated, you can get <code>recording</code> data in <code>data.body.call</code>:</p> <pre><code>{\n  contentUri: \"https://media.devtest.ringcentral.com/restapi/v1.0/account/170848004/recording/6469338004/content\"\n  id: \"6469338004\"\n  link: \"http://apps.ringcentral.com/integrations/recording/sandbox/?id=Ab7937-59r6EzUA&amp;recordingId=6469338004\"\n  type: \"OnDemand\"\n  uri: \"https://platform.devtest.ringcentral.com/restapi/v1.0/account/170848004/recording/6469338004\"\n}\n</code></pre> <p>The <code>link</code> property in <code>recording</code> is a link to get and play recording file from RingCentral server. The <code>contentUri</code> is a URI which can be used to get <code>recording</code> file  with RingCentral access token. If you pass <code>recordingWithToken</code> when register service, you can get contentUri with <code>access_token</code>. The <code>access_token</code> will be expired in minutes, so need to download immediately when get it.</p> <pre><code>{\n  contentUri: \"https://media.devtest.ringcentral.com/restapi/v1.0/account/170848004/recording/6469338004/content?access_token=ringcentral_access_token\"\n  id: \"6469338004\"\n  link: \"http://apps.ringcentral.com/integrations/recording/sandbox/?id=Ab7937-59r6EzUA&amp;recordingId=6469338004\"\n  type: \"OnDemand\"\n  uri: \"https://platform.devtest.ringcentral.com/restapi/v1.0/account/170848004/recording/6469338004\"\n}\n</code></pre>"},{"location":"integration/call-logging/#auto-log-calls-setting","title":"Auto log calls setting","text":"<p>1.10.0</p> <p>User can enable/disable auto log in settings page. To set default <code>Auto log calls</code> enabled:</p> <p>Add <code>defaultAutoLogCallEnabled</code> into the <code>adapter.js</code> URI:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?defaultAutoLogCallEnabled=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>Listen to <code>Auto log calls</code> setting changed:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-callLogger-auto-log-notify') {\n    console.log('rc-callLogger-auto-log-notify:', data.autoLog);\n  }\n});\n</code></pre>"},{"location":"integration/call-logging/#add-call-logger-modal","title":"Add call logger modal","text":"<p>For some developers who want to add note when log a call to their platform, we provide a log modal to support it.</p> <p>Add <code>showLogModal</code> when register service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    callLoggerPath: '/callLogger',\n    callLoggerTitle: 'Log to TestService',\n    showLogModal: true,\n  }\n}, '*');\n</code></pre> <p></p>"},{"location":"integration/call-logging/#add-call-log-entity-matcher","title":"Add call log entity matcher","text":"<p>In call logger button, widget needs to know if call is logged. To provide <code>callLogEntityMatcherPath</code> when register, widget will send match request to get match result of calls history.</p> <p>Note: If you have third party auth configured, call log entity matcher only works when <code>authorized</code> is <code>true</code>.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    callLoggerPath: '/callLogger',\n    callLoggerTitle: 'Log to TestService',\n    callLogEntityMatcherPath: '/callLogger/match'\n  }\n}, '*');\n</code></pre> <p>Then add a message event to response call logger matcher event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/callLogger/match') {\n      // add your codes here to reponse match result\n      console.log(data); // get call session id list in here\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: {\n          data: {\n            '214705503020': [{ // call session id from request\n              id: '88888', // call log entity id from your platform\n              note: 'Note', // Note of this call log entity\n            }]\n          }\n        },\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/call-logging/#trigger-call-logger-entity-match-manually","title":"Trigger call logger entity match manually","text":"<p>The widget will trigger call logger entity match after call logged automatically. But you can still trigger it to match manually</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-trigger-call-logger-match',\n  sessionIds: [`call_session_id`],\n}, '*');\n</code></pre>"},{"location":"integration/call-logging/#get-un-logged-calls","title":"Get un-logged calls","text":"<p>2.1.0</p> <p>When user have calls in other device during the widget closed, those calls data can't be sent by the <code>callLoggerPath</code> event even auto log enabled. You can get those calls by un-logged calls api.</p> <pre><code>const { calls, hasMore } = await RCAdapter.getUnloggedCalls(PER_PAGE, PAGE_NUMBER); // PER_PAGE: number of calls per page, PAGE_NUMBER: page number\n</code></pre>"},{"location":"integration/call-pop/","title":"Call pop","text":"<p>This page describes how to implement the call pop feature based on the Embeddable events.</p>"},{"location":"integration/call-pop/#listen-for-the-active-call-event","title":"Listen for the active call event","text":"<pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-active-call-notify':\n        // only pop call for incoming ringing call\n        if (data.call.direction === 'Inbound' &amp;&amp; data.call.telephonyStatus === 'Ringing') {\n          // here we popup a Google form pre-fill uri:\n          const formUri = `https://docs.google.com/forms/d/e/xxxxxxxxx/viewform?usp=pp_url&amp;entry.985526131=${data.call.direction}&amp;entry.1491856435=${data.call.from.phoneNumber}&amp;entry.875629840=${encodeURIComponent(data.call.fromName)}&amp;entry.1789287962=${data.call.to.phoneNumber}&amp;entry.1281736933=${encodeURIComponent(data.call.toName)}`;\n          window.open(formUri, 'Call form', 'width=600,height=600');\n        }\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre> <p>Here we listen to active call event. When there is an incoming call, it will popup a Google Forms pre-fill uri. Get the online demo here.</p>"},{"location":"integration/call-widget/","title":"Call widgets","text":"<p>3.0.0</p> <p>Check out the Embeddable Page Schema reference on how to structure content in Embeddable using JSON</p> <p>Call Widgets are a powerful capability of RingCentral Embeddable, allowing developers to inject dynamic, contextual content directly into the core RingCentral calling experience.</p> <p>When a user is on a call, call widgets appear in the right-hand panel, enabling quick access to relevant information or actions\u2014without leaving the call page.</p> <p></p>"},{"location":"integration/call-widget/#getting-started","title":"Getting started","text":""},{"location":"integration/call-widget/#enable-side-widget-feature","title":"Enable side widget feature","text":"<p>Before registering a widget, you must first enable the side widget feature:</p> Javascript <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?enableSideWidget=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>The <code>enableSideWidget=1</code> parameter is required to activate call widget functionality</p>"},{"location":"integration/call-widget/#register-a-call-widget","title":"Register a call widget","text":"<p>Once enabled, register your custom call widget:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n    type: 'rc-adapter-register-widget-app',\n    app: {\n      id: 'support-cases',\n      name: 'Support cases',\n      iconUri: 'https://example.com/icon.png',\n      pagePath: '/sidebarApps/support-cases',\n      inputChangedPath: '/sidebarApps/support-cases/inputChanged',\n      buttonEventPath: '/sidebarApps/support-cases/button-click',\n    },\n  }, '*')\n</code></pre> <ol> <li>Unique identifier for your widget</li> <li>Display name shown in the widget menu</li> <li>Icon URL (128x128px recommended)</li> <li>Main content request path</li> <li>Input change event path</li> <li>Button click event path</li> </ol> <p>Multiple widgets</p> <p>You can register multiple call widgets by calling the registration API multiple times with different configurations.</p> <p>After successful registration, your call widget will appear during active calls:</p> <p></p>"},{"location":"integration/call-widget/#building-widget-content","title":"Building widget content","text":""},{"location":"integration/call-widget/#understanding-the-request-flow","title":"Understanding the request flow","text":"<p>When a user opens your call widget, the Embeddable framework sends a message to your app requesting page data in JSON format. The widget page is rendered using the JSON schema page library, allowing for dynamic and customizable UI layouts.</p> <p>JSON Schema reference</p> <p>Learn how to define custom widget pages with JSON schema in the JSON schema page document.</p>"},{"location":"integration/call-widget/#basic-page-response","title":"Basic page response","text":"<p>Add an event listener to handle page data requests:</p> <pre><code>function responseMessage(request, response) {\n  document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n    type: 'rc-post-message-response',\n    responseId: request.requestId,\n    response,\n  }, '*');\n}\n\nfunction getCasesPageJSON(cases) {\n  return {\n    page: {\n      type: 'json-schema',\n      schema: {\n        type: 'object',\n        required: [],\n        properties: {\n          \"title\": {\n            \"type\": \"string\",\n            \"description\": \"All open cases\",\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"1 item, Updated at 06/13/2025\",\n          },\n          \"caseSearch\": {\n            \"type\": \"string\",\n            \"description\": \"Search cases\",\n          },\n          \"caseList\": {\n            \"type\": \"string\",\n            \"oneOf\": cases.map((item) =&gt; ({\n              const: item.link,\n              title: item.CaseNumber,\n              description: item.Subject,\n              authorName: item.Contact ? item.Contact.Name : null,\n              meta: item.Status,\n            })),\n          },\n          \"accountId\": {\n            \"type\": \"string\",\n            \"description\": \"Account ID\",\n          },\n        },\n      },\n      uiSchema: {\n        title: {\n          \"ui:field\": \"typography\",\n          \"ui:variant\": \"body2\",\n        },\n        description: {\n          \"ui:field\": \"typography\",\n          \"ui:variant\": \"caption1\",\n          \"ui:style\": { marginTop: '-20px' },\n        },\n        caseSearch: {\n          \"ui:field\": \"search\",\n          \"ui:placeholder\": 'Search this list',\n          \"ui:label\": false,\n          \"ui:style\": { marginTop: '-10px' },\n        },\n        caseList: {\n          \"ui:field\": \"list\",\n          \"ui:showSelected\": false,\n          \"ui:label\": false,\n        },\n        accountId: {\n          \"ui:widget\": \"hidden\",\n        },\n      },\n      formData: {\n        caseSearch: '',\n        accountId: 'hidden_account_id',\n      },\n    },\n    actions: [{\n      id: 'home',\n      label: 'Home',\n    }, {\n      id: 'unauthorize',\n      label: 'Unauthorize CRM',\n      color: 'danger.b04',\n    }],\n  };\n}\n\nwindow.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/sidebarApps/support-cases') {\n      const contact = data.body.contact; // get contact { phoneNumber } from call\n      // TODO: get cases from your CRM with contact info\n      const cases = [{\n        link: 'https://case_link',\n        CaseNumber: '666666',\n        Subject: 'Customer want to buy a car',\n        Contact: {\n          name: 'Customer Name',\n        },\n        Status: 'New',\n      }];\n      responseMessage(data, {\n        data: getCasesPageJSON(cases),\n      });\n    }\n  }\n});\n</code></pre> <ol> <li>Dynamic list generation from your data</li> <li>UI Schema controls the visual presentation</li> <li>Form data sets initial values</li> <li>Actions create menu buttons</li> <li>Contact information from the active call</li> </ol> <p></p>"},{"location":"integration/call-widget/#handling-user-interactions","title":"Handling user interactions","text":""},{"location":"integration/call-widget/#search-functionality","title":"Search functionality","text":"<p>Implement search with debouncing to optimize API calls:</p> <pre><code>// We use debounce to avoid sending too many requests to your CRM\nlet supportCasesSearchDebounce = null;\n\nfunction debounceSupportCasesSearch(request) {\n  if (!supportCasesSearchDebounce) {\n    supportCasesSearchDebounce = {};\n  } else {\n    const timeout = supportCasesSearchDebounce.timeout;\n    clearTimeout(timeout);\n    const preRequest = supportCasesSearchDebounce.request;\n    if (preRequest) {\n      // respond 'ok' to avoid re-render the page\n      responseMessage(preRequest, {\n        data: 'ok',\n      });\n    }\n  }\n  supportCasesSearchDebounce.request = request;\n  supportCasesSearchDebounce.timeout = setTimeout(async () =&gt; {\n    supportCasesSearchDebounce = null;\n    const contact = request.body.contact;\n    const search = request.body.formData.caseSearch;\n    const accountId = request.body.formData.accountId;\n    // TODO: get cases from your CRM\n    const cases = [{\n      link: 'https://case_link',\n      CaseNumber: '666666',\n      Subject: 'Customer want to buy a car',\n      Contact: {\n        name: 'Customer Name',\n      },\n      Status: 'New',\n    }];\n    responseMessage(request, {\n      data: getCasesPageJSON(cases),\n    });\n  }, 800);\n}\n\nwindow.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/sidebarApps/support-cases') {\n      // Handle main page request\n    }\n    if (data.path === '/sidebarApps/support-cases/inputChanged') {\n      if (data.body.changedKeys[0] === 'caseSearch') {\n        debounceSupportCasesSearch(data);\n      }\n    }\n  }\n});\n</code></pre> <ol> <li>800ms debounce delay to prevent excessive API calls</li> </ol>"},{"location":"integration/call-widget/#item-selection-handling","title":"Item selection handling","text":"<p>Handle user interactions with list items:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    // ...\n    if (data.path === '/sidebarApps/support-cases/inputChanged') {\n      // ...\n      if (data.body.changedKeys[0] === 'caseList') {\n        const caseLink = data.body.formData.caseList;\n        // Open case detail page in new tab\n        window.open(caseLink, '_blank');\n        responseMessage(data, {\n          data: 'ok',\n        });\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"integration/call-widget/#authentication-flow","title":"Authentication flow","text":""},{"location":"integration/call-widget/#authorization-page","title":"Authorization page","text":"<p>For widgets requiring authentication, implement an authorization flow:</p> <p></p> <pre><code>let crmAuthorized = false; // Set to true when user authorizes your CRM\n\nfunction getAuthorizationPageJSON() {\n  return {\n    page: {\n      type: 'json-schema',\n      schema: {\n        type: 'object',\n        required: [],\n        properties: {\n          \"crmAuthButton\": {\n            \"type\": \"string\",\n            \"title\": \"Authorize CRM\",\n          },\n        },\n      },\n      uiSchema: {\n        \"crmAuthButton\": {\n          \"ui:field\": \"button\",\n          \"ui:variant\": \"contained\", // \"text\", \"outlined\", \"contained\", \"plain\"\n          \"ui:fullWidth\": true\n        },\n      },\n      formData: {},\n    },\n  };\n}\n\nfunction getRefreshAuthorizationJson() {\n  return {\n    page: {\n      type: 'json-schema',\n      schema: {\n        type: 'object',\n        required: [],\n        properties: {\n          \"someMessage\": {\n            \"type\": \"string\",\n            \"description\": \"Refresh the app after authorization\",\n          },\n        },\n      },\n      uiSchema: {\n        someMessage: {\n          \"ui:field\": \"admonition\",\n          \"ui:severity\": \"info\",\n        },\n      },\n      formData: {},\n    },\n  };\n}\n</code></pre>"},{"location":"integration/call-widget/#authorization-handling","title":"Authorization handling","text":"<pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/sidebarApps/support-cases') {\n      if (!crmAuthorized) {\n        // Show authorization page\n        responseMessage(data, {\n          data: getAuthorizationPageJSON(),\n        });\n        return;\n      }\n      // Show main content when authorized\n    }\n    if (data.path === '/sidebarApps/support-cases/button-click') {\n      if (data.body.button.id === 'crmAuthButton') {\n        // Open authorization page in new tab\n        window.open('https://crm-authorization-page', '_blank');\n        responseMessage(data, {\n          data: getRefreshAuthorizationJson(),\n        });\n      }\n    }\n  }\n});\n</code></pre> <p>Post-authorization flow</p> <p>After user authorization, the app needs to be refreshed to load the authenticated data. The widget will display a refresh message to guide users through this process.</p>"},{"location":"integration/call-widget/#action-buttons","title":"Action buttons","text":"<p>Actions are buttons that appear in the call widget's more actions menu:</p> <p></p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/sidebarApps/support-cases/button-click') {\n      if (data.body.button.id === 'home') {\n        // Navigate to home page\n        responseMessage(data, {\n          data: getCasesPageJSON(cases),\n        });\n      }\n      if (data.body.button.id === 'unauthorize') {\n        // Revoke authorization\n        crmAuthorized = false;\n        responseMessage(data, {\n          data: getAuthorizationPageJSON(),\n        });\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"integration/call-widget/#example-implementation","title":"Example implementation","text":""},{"location":"integration/call-widget/#contact-notes-widget","title":"Contact notes widget","text":"<p>Here is an online demo of a contact notes widget:</p> <p>Contact notes widget online demo</p> <p></p> <p>Complete implementation</p> <p>Get the full source code for the contact notes widget in the GitHub repository.</p>"},{"location":"integration/click-to-dial/","title":"Working with RingCentral's click-to-dial library","text":"<p>This is document that show how to implement <code>Click To Dial</code> feature with RingCentral C2D library. RingCentral C2D is a library that help developers to implement <code>Click To Dial</code> and <code>Click To SMS</code> feature, it will scan phone numbers in web page. When users hover on phone number, it will show C2D widget for <code>Click to Call</code>.</p> <p></p> <p>To implement with RingCentral Embeddable:</p> <pre><code>&lt;script src=\"https://unpkg.com/ringcentral-c2d@1.0.0/build/index.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n// Inject Embeddable\n(function() {\n  var rcs = document.createElement(\"script\");\n  rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js\";\n  var rcs0 = document.getElementsByTagName(\"script\")[0];\n  rcs0.parentNode.insertBefore(rcs, rcs0);\n})();\n// Interact with RingCentral C2D\nvar clickToDial = new RingCentralC2D();\nclickToDial.on(RingCentralC2D.events.call, (phoneNumber) =&gt; {\n  RCAdapter.clickToCall(phoneNumber, true);\n});\nclickToDial.on(RingCentralC2D.events.text, (phoneNumber) =&gt; {\n  RCAdapter.clickToSMS(phoneNumber);\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"integration/contact-activities/","title":"Show contact's activities from your application","text":"<p>This feature requires you to register your app as a service first.</p> <p>First you need to pass <code>activitiesPath</code> and <code>activityPath</code> when you register service.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    activityName: 'TestService', // optional, will use service.name as default\n    activitiesPath: '/activities',\n    activityPath: '/activity'\n  }\n}, '*');\n</code></pre> <p>Add a message event to response activities query event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/activities') {\n      const contact = data;\n      console.log(contact);\n      const activities = [{\n        id: '123',\n        subject: 'Title',\n        time: 1528854702472\n      }];\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: activities },\n      }, '*');\n    }\n    if (data.path === '/activity') {\n      const activity = data;\n      // handle activity here\n      console.log(activity);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p>Data from <code>activitiesPath</code> will be showed in contact details page in the widget. Event from <code>activityPath</code> is triggered when user click activity item in the widget.</p> <p></p>"},{"location":"integration/custom-call-log-page/","title":"Creating a customize call log page","text":"<p>2.0.0</p> <p>Check out the Embeddable Page Schema reference on how to structure content in Embeddable using JSON</p> <p>From <code>v2.0.0</code>, call logger modal is refactored into call log page:</p> <p></p> <p>You can customize call log page by adding <code>callLogPageDataPath</code> and <code>callLogPageInputChangedEventPath</code> when register service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    callLoggerPath: '/callLogger',\n    callLoggerTitle: 'Log to TestService',\n    // showLogModal: false, // disable showLogModal if you want to use call log page\n    callLogPageInputChangedEventPath: '/callLogger/inputChanged',\n  }\n}, '*');\n</code></pre> <p>Then add message event listener to show call log page and input changed request:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/callLogger') {\n      // Get trigger type: data.body.triggerType\n      // When user click log button in call item, triggerType is 'createLog' or 'editLog'\n      // When it is triggered from auto log, triggerType is 'presenceUpdate'\n      // When save button clicked, triggerType is 'logForm'\n      if (data.body.triggerType === 'createLog' || data.body.triggerType === 'editLog') {\n        // customize call log page\n        document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n          type: 'rc-adapter-update-call-log-page',\n          page: {\n            title: 'Log to TestService',\n            // schema and uiSchema are used to customize call log page, api is the same as [jsonschema-page](https://ringcentral.github.io/ringcentral-embeddable/jsonschema-page/?path=/docs/readme--docs)\n            schema: {\n              type: 'object',\n              required: ['contact', 'activityTitle'],\n              properties: {\n                \"warning\": {\n                  \"type\": \"string\",\n                  \"description\": \"No contact found. Enter a name to have a placeholder contact made for you.\",\n                },\n                \"contact\": {\n                  \"title\": \"Contact\",\n                  \"type\": \"string\",\n                  \"oneOf\": [\n                    {\n                      \"const\": \"xxx\",\n                      \"title\": \"John Doe\",\n                      \"description\": \"Candidate - 347\",\n                    },\n                    {\n                      \"const\": \"newEntity\",\n                      \"title\": \"Create placeholder contact\"\n                    }\n                  ],\n                },\n                \"contactName\": {\n                  \"type\": 'string',\n                  \"title\": \"Contact name\",\n                },\n                \"contactType\": {\n                  \"title\": \"Contact type\",\n                  \"type\": \"string\",\n                  \"oneOf\": [\n                    {\n                      \"const\": \"candidate\",\n                      \"title\": \"Candidate\"\n                    },\n                    {\n                      \"const\": \"contact\",\n                      \"title\": \"Contact\"\n                    }\n                  ],\n                },\n                \"activityTitle\": {\n                  \"type\": \"string\",\n                  \"title\": \"Activity title\"\n                },\n                \"note\": {\n                  \"type\": \"string\",\n                  \"title\": \"Note\"\n                },\n              },\n            },\n            uiSchema: {\n              warning: {\n                \"ui:field\": \"admonition\", // or typography to show raw text\n                \"ui:severity\": \"warning\", // \"warning\", \"info\", \"error\", \"success\"\n              },\n              contactName: {\n                \"ui:placeholder\": 'Enter name',\n                \"ui:widget\": \"hidden\", // remove this line to show contactName input\n              },\n              contactType: {\n                \"ui:placeholder\": 'Select contact type',\n                \"ui:widget\": \"hidden\", // remove this line to show contactType input\n              },\n              note: {\n                \"ui:placeholder\": 'Enter note',\n                \"ui:widget\": \"textarea\", // show note input as textarea\n              },\n              submitButtonOptions: {\n                submitText: 'Save',\n              },\n            },\n            formData: {\n              contact: 'xxx',\n              contactName: '',\n              contactType: '',\n              activityTitle: 'Outbound call to ...',\n              note: '',\n            },\n          },\n        }, '*');\n        // navigate to call log page\n        document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n          type: 'rc-adapter-navigate-to',\n          path: `/log/call/${data.body.call.sessionId}`,\n        }, '*');\n      }\n      if (data.body.triggerType === 'logForm' || data.body.triggerType === 'presenceUpdate') {\n        // Save call log to your platform\n        console.log(data.body); // data.body.call, data.body.formData\n      }\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n          type: 'rc-post-message-response',\n          responseId: data.requestId,\n          response: { data: 'ok' },\n        }, '*');\n      return;\n    }\n    if (data.path === '/callLogger/inputChanged') {\n      console.log(data); // get input changed data in here: data.body.formData\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n      // you can update call log page data here to make the form dynamic\n      return;\n    }\n  }\n});\n</code></pre> <p>JSON Schema reference</p> <p>Learn how to define custom page components with JSON schema in the JSON schema page document.</p> <p></p>"},{"location":"integration/custom-page/","title":"Custom page","text":"<p>2.0.0</p> <p>RingCentral Embeddable is a powerful tool that allows you to customize the user experience for your users. You can create customized pages or tabs to display your own content in the widget.</p>"},{"location":"integration/custom-page/#register-a-page","title":"Register a page","text":"<p>Register a customized page:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-customized-page',\n  page: {\n    id: 'page1', // page id, required\n    title: 'Customized page 1',\n    type: 'page',\n    // schema and uiSchema are used to customize page, api is the same as [jsonschema-page](https://ringcentral.github.io/ringcentral-embeddable/jsonschema-page/?path=/docs/readme--docs)\n    schema: {\n      type: 'object',\n      required: ['contactType', 'defaultContactName'],\n      properties: {\n        \"warning\": {\n          \"type\": \"string\",\n          \"description\": \"Please authorize the CRM to use this feature.\"\n        },\n        \"someMessage\": {\n          \"type\": \"string\",\n          \"description\": \"This is a description message\"\n        },\n        \"someLink\": {\n          \"type\": \"string\",\n          \"description\": \"This is a link message\"\n        },\n        \"openSettingsButton\": {\n          \"type\": \"string\",\n          \"title\": \"Open CRM settings\",\n        },\n        \"contactType\": {\n          \"type\": \"string\",\n          \"title\": \"Default link type\",\n          \"oneOf\": [\n            {\n              \"const\": \"candidate\",\n              \"title\": \"Candidate\"\n            },\n            {\n              \"const\": \"contact\",\n              \"title\": \"Contact\"\n            }\n          ],\n        },\n        \"defaultContactName\": {\n          \"type\": \"string\",\n          \"title\": \"Default contact name\",\n        },\n        \"defaultNote\": {\n          \"type\": \"string\",\n          \"title\": \"Default note\",\n        },\n      },\n    },\n    uiSchema: {\n      submitButtonOptions: { // optional if you don't want to show submit button\n        submitText: 'Save',\n      },\n      warning: {\n        \"ui:field\": \"admonition\",\n        \"ui:severity\": \"warning\",  // \"warning\", \"info\", \"error\", \"success\"\n      },\n      someMessage: {\n        \"ui:field\": \"typography\",\n        \"ui:variant\": \"body1\", // \"caption1\", \"caption2\", \"body1\", \"body2\", \"subheading2\", \"subheading1\", \"title2\", \"title1\"\n        // \"ui:bulletedList\": true, // show text as list item // supported from v2.0.1\n      },\n      someLink: {\n        \"ui:field\": \"link\", // supported from v2.0.1\n        \"ui:variant\": \"body1\",\n        \"ui:color\": \"avatar.brass\",\n        \"ui:underline\": false,\n        \"ui:href\": \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/\",\n      },\n      openSettingsButton: {\n        \"ui:field\": \"button\",\n        \"ui:variant\": \"contained\", // \"text\", \"outlined\", \"contained\", \"plain\"\n        \"ui:fullWidth\": true\n      },\n      defaultContactName: {\n        \"ui:placeholder\": 'Enter default contact name',\n      },\n      defaultNote: {\n        \"ui:placeholder\": 'Enter default note',\n        \"ui:widget\": \"textarea\", // show note input as textarea\n      },\n    },\n    formData: {\n      contactType: 'candidate',\n      defaultContactName: 'John Doe',\n      defaultNote: '',\n    },\n  },\n}, '*');\n</code></pre> <p>JSON Schema reference</p> <p>Learn how to define custom page with JSON schema in the JSON schema page document.</p> <p>To update the page, you can re-register the page with new data and same page id.</p> <p>Navigate to the page:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-navigate-to',\n  path: '/customized/page1', // page id\n}, '*');\n</code></pre> <p></p>"},{"location":"integration/custom-page/#handle-button-clicked-and-input-changed-event","title":"Handle button clicked and input changed event","text":"<p>Pass <code>buttonEventPath</code> and <code>customizedPageInputChangedEventPath</code> when you register service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    customizedPageInputChangedEventPath: '/customizedPage/inputChanged',\n    buttonEventPath: '/button-click',\n  }\n}, '*');\n</code></pre> <p>Add event listener to get button clicked and input changed event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/customizedPage/inputChanged') {\n      console.log(data); // get input changed data in here: data.body.input\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n      // you can re-register page data here to update the page\n      return;\n    }\n    if (data.path === '/button-click') {\n      if (data.body.button.id === 'page1') {\n        // on submit button click\n        // button id is the page id\n        console.log('Save button clicked');\n        // ...\n      }\n      if (data.body.button.id === 'openSettingsButton') {\n        // click on the button registered in schema, button id is the button key\n        console.log('Open settings button clicked');\n        // ...\n      }\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p>When the user clicks the button, you will receive a message with the path <code>/button-click</code>. When the user changes the input, you will receive a message with the path <code>/customizedPage/inputChanged</code>.</p>"},{"location":"integration/custom-settings/","title":"Custom third-party settings and preferences","text":"<p>This feature requires you to register your app as a service first.</p> <p>Check out the Embeddable Page Schema reference on how to structure content in Embeddable using JSON</p> <p>For some features that support user to customize, widget supports to add settings into widget's setting page.</p>"},{"location":"integration/custom-settings/#register-settings","title":"Register settings","text":"<p>First, register service with <code>settings</code> and <code>settingsPath</code>:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    settingsPath: '/settings',\n    settings: [\n      {\n        \"id\": \"openContactPageAtCall\",\n        \"type\": \"boolean\",\n        \"name\": \"Open Contact Page at Call\",\n        \"value\": true\n      },\n    ],\n  }\n}, '*');\n</code></pre>"},{"location":"integration/custom-settings/#register-button-section-and-group","title":"Register button, section and group","text":"<p>2.0.0</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    settingsPath: '/settings',\n    settings: [\n      {\n        \"id\": 'openLoggingPageAfterCall',\n        \"type\": 'boolean',\n        \"name\": 'Open call logging page after call',\n        \"value\": true,\n        \"groupId\": 'logging', // optional, group settings into call and sms logging settings\n        // \"readOnly\": true, // supported from v2.1.0\n        // \"readOnlyReason\": \"This setting is managed by admin\", // supported from v2.1.0\n      },\n      {\n        \"id\": \"goToAppSettings\",\n        \"type\": \"button\",\n        \"name\": \"Go to App settings\",\n        \"buttonLabel\": \"Open\",\n      },\n      {\n        \"id\": \"crmSetting\",\n        \"type\": \"section\",\n        \"name\": \"CRM settings\",\n        \"items\": [\n          {\n            \"id\": \"info\",\n            \"name\": \"info\",\n            \"type\": \"admonition\",\n            \"severity\": \"info\",\n            \"value\": \"Please authorize ThirdPartyService firstly\",\n          },\n          {\n            \"id\": \"introduction\",\n            \"name\": \"Introduction\",\n            \"type\": \"typography\",\n            \"variant\": \"body2\", // optional, default is body1\n            \"value\": \"Update ThirdPartyService contact settings\",\n          },\n          {\n            \"id\": 'openContactPageAtCall',\n            \"type\": 'boolean',\n            \"name\": 'Open contact for incoming calls',\n            \"value\": true,\n          },\n          {\n            \"id\": \"defaultRecordType\",\n            \"type\": \"option\",\n            \"name\": \"Default record type\",\n            \"options\": [{\n              \"id\": \"Lead\",\n              \"name\": \"Lead\"\n            }, {\n              \"id\": \"Contact\",\n              \"name\": \"Contact\"\n            }],\n            \"value\": \"\",\n            \"required\": true,\n            \"placeholder\": \"Select default record type\"\n          },\n          {\n            \"id\": \"defaultContactName\",\n            \"type\": \"string\",\n            \"name\": \"Default contact name\",\n            \"value\": \"John Doe\",\n            \"required\": true,\n            \"placeholder\": \"Input default contact name\"\n          },\n          {\n            \"id\": \"defaultNote\",\n            \"type\": \"text\",\n            \"name\": \"Default note\",\n            \"value\": \"\",\n            \"placeholder\": \"Input default note\"\n          },\n        ]\n      },\n      {\n        \"id\": \"support\",\n        \"type\": \"group\",\n        \"name\": \"Support\",\n        \"items\": [{\n          \"id\": \"document\",\n          \"type\": \"externalLink\",\n          \"name\": \"Document\",\n          \"uri\": \"https://www.google.com\",\n        }, {\n          \"id\": \"feedback\",\n          \"type\": \"button\",\n          \"name\": \"Feedback\",\n          \"buttonLabel\": \"Open\",\n          \"buttonType\": \"link\",\n        }, {\n          \"id\": \"devSupport\",\n          \"type\": \"button\",\n          \"name\": \"Developer support\",\n          \"buttonLabel\": \"Open\",\n        }]\n      },\n    ],\n    buttonEventPath: '/button-click', // required if you have button type in settings\n  }\n}, '*');\n</code></pre> <p>In settings root items, it only supports <code>boolean</code>, <code>button</code>, <code>section</code> and <code>group</code> type. In section's items, it supports <code>boolean</code>, <code>string</code>, <code>option</code>, <code>text</code>, <code>typography</code> and <code>admonition</code> type.</p> <p>After registering, you can get your setting in settings page:</p> <p></p> <p></p> <p></p> <p>Add a message event to listen settings updated event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/settings') {\n      // add your codes here to save settings into your service\n      console.log(data);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n    if (data.path === '/button-click') {\n      // add your codes here to handle button click event\n      console.log(data);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/custom-settings/#listen-for-setting-button-click","title":"Listen for setting button click","text":"<p>2.0.0</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/button-click') {\n      // add your codes here to handle button click event\n      console.log(data);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/custom-settings/#set-settings-item-order","title":"Set settings item order","text":"<p>2.0.0</p> <p>You can set settings item order by adding <code>order</code> field in settings item:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    settingsPath: '/settings',\n    settings: [\n      {\n        \"id\": \"settingItem1\",\n        \"type\": \"button\",\n        \"name\": \"Setting Item 1\",\n        \"buttonLabel\": \"Open\",\n        \"order\": 250 // the smaller the number, the higher the priority. \n        // Calling setting order value: 100,\n        // Audio setting order value: 200,\n        // Region setting order value: 300,\n        // Status setting order value: 400,\n        // Call and SMS logging setting order value: 500,\n      },\n    ],\n    buttonEventPath: '/button-click', // required if you have button type in settings\n    // ...\n  }\n}, '*');\n</code></pre>"},{"location":"integration/custom-settings/#update-settings","title":"Update settings","text":"<p>2.0.0</p> <p>You can update settings by sending <code>rc-adapter-update-third-party-settings</code> message:</p> <pre><code>  document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n    type: 'rc-adapter-update-third-party-settings',\n    settings: [\n      {\n        \"id\": \"openContactPageAtCall\",\n        \"type\": \"boolean\",\n        \"name\": \"Open Contact Page at Call\",\n        \"value\": true,\n      },\n      {\n        \"id\": \"openCRMPage\",\n        \"type\": \"button\",\n        \"name\": \"Go to app settings\",\n        \"buttonLabel\": \"Open\",\n        \"order\": 10000,\n      },\n    ],\n  }, '*');\n</code></pre>"},{"location":"integration/custom-tab/","title":"Custom tab","text":"<p>2.0.0</p> <p>Check out the Embeddable Page Schema reference on how to structure content in Embeddable using JSON</p> <p>RingCentral Embeddable is a powerful tool that allows you to customize the user experience for your users. You can create customized pages or tabs to display your own content in the widget.</p>"},{"location":"integration/custom-tab/#register-a-tab","title":"Register a tab","text":"<pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-customized-page',\n  page: {\n    id: 'tabID', // tab id, required\n    title: 'CRM',\n    type: 'tab', // tab type\n    iconUri: 'https://xxx/icon.png', // icon for tab, 24x24, recommended color: #16181D\n    activeIconUri: 'https://xxx/icon-active.png', // icon for tab in active status, 24x24, recommended color: ##2559E4\n    darkIconUri: 'https://xxx/icon-dark.png', // Supported from v2.2.1, icon for tab in dark mode, 24x24, recommended color: #ffffff\n    hidden: false, // optional, default false, whether to hide the tab icon from navigation bar\n    unreadCount: 0, // optional, unread count, 0-99\n    priority: 31, // tab priority, 0-100, 0 is the highest priority, Phone tab: 10, Text: 20, Fax: 30, Glip: 40, Contacts: 50, Video: 60, Settings: 70\n    // schema and uiSchema are used to customize page, api is the same as [jsonschema-page](https://ringcentral.github.io/ringcentral-embeddable/jsonschema-page/?path=/docs/readme--docs)\n    schema: {\n      type: 'object',\n      required: ['contactType', 'defaultContactName'],\n      properties: {\n        \"warning\": {\n          \"type\": \"string\",\n          \"description\": \"Please authorize the CRM to use this feature.\"\n        },\n        \"someMessage\": {\n          \"type\": \"string\",\n          \"description\": \"This is a description message\"\n        },\n        \"openSettingsButton\": {\n          \"type\": \"string\",\n          \"title\": \"Open CRM settings\",\n        },\n        \"contactType\": {\n          \"type\": \"string\",\n          \"title\": \"Default link type\",\n          \"oneOf\": [\n            {\n              \"const\": \"candidate\",\n              \"title\": \"Candidate\"\n            },\n            {\n              \"const\": \"contact\",\n              \"title\": \"Contact\"\n            }\n          ],\n        },\n        \"defaultContactName\": {\n          \"type\": \"string\",\n          \"title\": \"Default contact name\",\n        },\n        \"defaultNote\": {\n          \"type\": \"string\",\n          \"title\": \"Default note\",\n        },\n      },\n    },\n    uiSchema: {\n      submitButtonOptions: { // optional if you don't want to show submit button\n        submitText: 'Save',\n      },\n      warning: {\n        \"ui:field\": \"admonition\",\n        \"ui:severity\": \"warning\",  // \"warning\", \"info\", \"error\", \"success\"\n      },\n      someMessage: {\n        \"ui:field\": \"typography\",\n        \"ui:variant\": \"body1\", // \"caption1\", \"caption2\", \"body1\", \"body2\", \"subheading2\", \"subheading1\", \"title2\", \"title1\"\n      },\n      openSettingsButton: {\n        \"ui:field\": \"button\",\n        \"ui:variant\": \"contained\", // \"text\", \"outlined\", \"contained\", \"plain\"\n        \"ui:fullWidth\": true\n      },\n      defaultContactName: {\n        \"ui:placeholder\": 'Enter default contact name',\n      },\n      defaultNote: {\n        \"ui:placeholder\": 'Enter default note',\n        \"ui:widget\": \"textarea\", // show note input as textarea\n      },\n    },\n    formData: {\n      contactType: 'candidate',\n      defaultContactName: 'John Doe',\n      defaultNote: '',\n    },\n  },\n}, '*');\n</code></pre> <p>JSON Schema reference</p> <p>Learn how to define custom page with JSON schema in the JSON schema page document.</p> <p>Navigate to the tab:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-navigate-to',\n  path: '/customizedTabs/tabID', // page id\n}, '*');\n</code></pre> <p></p>"},{"location":"integration/custom-tab/#handle-button-clicked-and-input-changed-event","title":"Handle button clicked and input changed event","text":"<p>Pass <code>buttonEventPath</code> and <code>customizedPageInputChangedEventPath</code> when you register service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    customizedPageInputChangedEventPath: '/customizedPage/inputChanged',\n    buttonEventPath: '/button-click',\n  }\n}, '*');\n</code></pre> <p>Add event listener to get button clicked and input changed event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/customizedPage/inputChanged') {\n      console.log(data); // get input changed data in here: data.body.input\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n      // you can re-register page data here to update the page\n      return;\n    }\n    if (data.path === '/button-click') {\n      if (data.body.button.id === 'page1') {\n        // on submit button click\n        // button id is the page id\n        console.log('Save button clicked');\n        // ...\n      }\n      if (data.body.button.id === 'openSettingsButton') {\n        // click on the button registered in schema, button id is the button key\n        console.log('Open settings button clicked');\n        // ...\n      }\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p>When the user clicks the button, you will receive a message with the path <code>/button-click</code>. When the user changes the input, you will receive a message with the path <code>/customizedPage/inputChanged</code>.</p>"},{"location":"integration/custom-tab/#show-list-in-customized-tab","title":"Show list in customized tab","text":"<p>You can show a list in the customized page:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-customized-page',\n  page: {\n    id: 'tabID', // tab id, required\n    title: 'CRM',\n    type: 'tab', // tab type\n    iconUri: 'https://xxx/icon.png', // icon for tab, 24x24\n    activeIconUri: 'https://xxx/icon-active.png', // icon for tab in active status, 24x24\n    priority: 31,\n    // schema and uiSchema are used to customize page, api is the same as [react-jsonschema-form](https://rjsf-team.github.io/react-jsonschema-form)\n    schema: {\n      type: 'object',\n      required: [],\n      properties: {\n        \"search\": {\n          \"type\": \"string\",\n        },\n        \"opportunity\": {\n          \"type\": \"string\",\n          \"oneOf\": [{\n            \"const\": \"opportunity1\",\n            \"title\": \"Opportunity 1\",\n            \"description\": \"This is a description message\",\n            \"meta\": \"4/18\",\n            \"icon\": \"https://xxx/icon1.png\"\n          }, {\n            \"const\": \"opportunity2\",\n            \"title\": \"Opportunity 2\",\n            \"description\": \"This is a description message 2\",\n            \"meta\": \"4/15\",\n            \"icon\": \"https://xxx/icon1.png\"\n          }]\n        },\n        \"section\": {\n          \"type\": \"string\",\n          \"oneOf\": [{\n            \"const\": \"advanced1\",\n            \"title\": \"Advanced settings 1\",\n          }, {\n            \"const\": \"advanced2\",\n            \"title\": \"Advanced settings 2\",\n          }]\n        },\n      },\n    },\n    uiSchema: {\n      search: {\n        \"ui:placeholder\": 'Search',\n        \"ui:label\": false,\n      },\n      opportunity: {\n        \"ui:field\": \"list\",\n        \"ui:showIconAsAvatar\": true, // optional, default true. show icon as avatar (round) in list\n      },\n      section: {\n        \"ui:field\": \"list\",\n        \"ui:navigation\": true, // optional, default false. show list as navigation items, supported from v2.1.0. it can be used to navigate to another page\n      },\n    },\n    formData: {\n      search: '',\n      opportunity: '',\n    },\n  },\n}, '*');\n</code></pre> <p>When user clicks on the list item, you will receive a message with the path <code>/customizedPage/inputChanged</code>.</p>"},{"location":"integration/do-not-contact/","title":"Do Not Contact","text":"<p>2.0.0</p> <p>This is feature to prevent the user to call/message someone who is in the DoNotContact list in your service.</p> <p>To enable the feature, please pass <code>doNotContactPath</code> when you register service.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    doNotContactPath: '/doNotContact',\n  }\n}, '*');\n</code></pre> <p>Add a message event to response DoNotContact checking event:</p> <pre><code>// Function to response message to widget\nfunction responseMessage(request, response) {\n  console.log(request);\n  document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n    type: 'rc-post-message-response',\n    responseId: request.requestId,\n    response,\n  }, '*');\n}\n\nconst DO_NOT_CONTACTS_LIST = []; // Your DoNotContact list\nwindow.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    const request = data;\n    if (request.path === '/doNotContact') {\n      // For DoNotContact checking for call\n      if (request.body.actionType === 'call') {\n        // Check if the phone number is in the DoNotContact list, you can check with your own API/logic\n        if (DO_NOT_CONTACTS_LIST.includes(request.body.phoneNumber)) {\n          responseMessage(request, {\n            data: {\n              result: true, // true: do not contact, false: can contact,\n              message: 'This is a do not contact message.', // optional, message to show in widget\n              mode: 'restrict', // optional, restrict mode to prevent user from calling. Or allow user to force call after warning.\n            },\n          });\n          return;\n        }\n        // If the phone number is not in the DoNotContact list, you can allow the user to call\n        responseMessage(request, {\n          data: {\n            result: false,\n          },\n        });\n        return;\n      }\n    }\n    // For DoNotContact checking for sms\n    if (request.body.actionType === 'sms') {\n      // Check if the phone number is in the DoNotContact list, you can check with your own API/logic\n      if (request.body.recipients.find((item) =&gt; DO_NOT_CONTACTS_LIST.includes(item.phoneNumber))) {\n        responseMessage(request, {\n          data: {\n            result: true, // true: do not contact, false: can contact,\n            message: 'This is a do not contact message',\n            mode: 'restrict' // optional, restrict mode to prevent user from messaging. Or allow user to force sending after warning.\n          },\n        });\n        return;\n      }\n      responseMessage(request, {\n        data: {\n          result: false,\n        },\n      });\n      return;\n    }\n  }\n});\n</code></pre> <p>When user make a call or send a message, the widget will send request to check if the phone number is in the DoNotContact list. If the phone number is in the DoNotContact list, the widget will show a warning message to the user and prevent the user from calling/messaging. If the phone number is not in the DoNotContact list, the widget will allow the user to call/message.</p> <p>Restrict mode:</p> <p></p> <p>No restrict mode:</p> <p></p>"},{"location":"integration/events/","title":"RingCentral Embeddable events","text":"<p>RingCentral Embeddable emits a number of events that a developer can subscribe to in order to integrate more deeply with the library. Subscribing to these events is done via the postMessage API.</p>"},{"location":"integration/events/#active-call-event","title":"Active call event","text":"<p>This event is fired for all calling modes, even when the call is on another device within the same RingCentral account. Get all active calls in current RingCentral logged user (extension) via a message event.</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-active-call-notify':\n        // get call on active call updated event\n        console.log(data.call);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre> <p>Working with multiple instances of Embeddable</p> <p>If user opens multiple tabs, the event will be fired in every tab. <code>disableInactiveTabCallEvent</code> is a option that makes widget only fire active call event in last active tab. Just add <code>disableInactiveTabCallEvent=1</code> in widget adapter js uri or iframe src.</p>"},{"location":"integration/events/#dialer-status-event","title":"Dialer status event","text":"<p>Before we use the API to open the dialer, we need to check dialer status to make sure it is ready. This event fires whenever the status of the dialer changes. </p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-dialer-status-notify':\n        // get dialer status from widget\n        console.log('rc-dialer-status-notify:', data.ready);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#login-popup-event","title":"Login popup event","text":"<p>Embeddable will open a popup window in order to login a user when that user clicks the login button. For some reason, you may want to popup window by yourself. So you can use login popup event to get login URI for open login window.</p> <p>For enabling this event, set the <code>disableLoginPopup=1</code> configuration parameter.</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-login-popup-notify':\n        // get login oAuthUri from widget\n        console.log('rc-login-popup-notify:', data.oAuthUri);\n        //  window.open(data.oAuthUri); // open oauth uri to login\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre> <p>This event also allows you to intercept the RingCentral authorization code if you so choose to faciliate authorization, which you can use to complete the authorization process for Embeddable. </p>"},{"location":"integration/events/#login-status-event","title":"Login status event","text":"<p>You can receive changes to the user's current login status via this event, allowing you reinitiate the login process if the user is loged out, or to perform other login-related operations. </p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-login-status-notify':\n        // get login status from widget\n        console.log('rc-login-status-notify:', data.loggedIn, data.loginNumber);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#meeting-status-event","title":"Meeting status event","text":"<p>Get meeting status and permission:</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-meeting-status-notify':\n        // get meeting status and permission from widget\n        console.log('rc-meeting-status-notify:', data.ready, data.permission);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#message-event","title":"Message event","text":"<p>Get all message created or updated events via Embeddable. These message events include events relating to:</p> <ul> <li>SMS messages sent/received</li> <li>Voicemails received</li> <li>Fax messages sent/received</li> </ul> <p>This does not include Team chat messaging events. </p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-message-updated-notify':\n        // get message from widget event\n        console.log('rc-message-updated-notify:', data.message);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#new-inbound-messages","title":"New inbound messages","text":"<p>Get new inbound message event from Embeddable.</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-inbound-message-notify':\n        // get new inbound message from widget event\n        console.log('rc-inbound-message-notify:', data.message);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#presence-sync-event","title":"Presence sync event","text":"<p>Subscribe to presence change events for the currently logged in user.</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-adapter-syncPresence':\n        // get dndStatus, telephonyStatus, userStatus defined here \n        // https://developers.ringcentral.com/api-reference/Extension-Presence-Event\n        console.log(data);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre> <p>You can modify a user's presence via Embeddable's API</p>"},{"location":"integration/events/#region-settings-event","title":"Region settings event","text":"<p>Subscribe to any changes to a user's region settings.</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-region-settings-notify':\n        // get region settings from widget\n        console.log('rc-region-settings-notify:', data);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#ringout-call-event","title":"RingOut call event","text":"<p>This event is fired when calling mode is set to <code>My RingCentral Phone</code> or <code>Custom Phone</code>. Get the RingOut call event via message event:</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-ringout-call-notify':\n        // get call on active call updated event\n        console.log(data.call);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre> <p>Learn more about RingOut</p>"},{"location":"integration/events/#route-changed-event","title":"Route changed event","text":"<p>Get Current page route from widget</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-route-changed-notify':\n        // get current page route from widget\n        console.log('rc-route-changed-notify:', data.path);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#telephony-session-event","title":"Telephony Session Event","text":"<p>Telephony Session is active call data from new Call Control API. In telephony session, we can get full state of caller and callee. We can use Telephony Session event instead of Active Call event.</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-telephony-session-notify':\n        // get telehony session on telephony session event\n        console.log(data.telephonySession);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre> <p>Working with multiple instances of Embeddable</p> <p>If user opens multiple tabs, the event will be fired in every tab. From <code>v1.10.1</code>, <code>disableInactiveTabCallEvent</code> is a option that makes widget only fire this event in last active tab. Just add <code>disableInactiveTabCallEvent=1</code> in widget adapter js uri or iframe src.</p>"},{"location":"integration/events/#web-phone-call-event","title":"Web phone call event","text":"<p>These events are only fired when calling mode is set to <code>Browser</code> and the user has received a call via Embedddable.</p> <p>Get web phone (Browser) call info from web phone call event:</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-call-ring-notify':\n        // get call when user gets a ringing call\n        console.log(data.call);\n        break;\n      case 'rc-call-init-notify':\n        // get call when user creates a call from dial\n        console.log(data.call);\n        break;\n      case 'rc-call-start-notify':\n        // get call when a incoming call is accepted or a outbound call is connected\n        console.log(data.call);\n        break;\n      case 'rc-call-hold-notify':\n        // get call when user holds a call\n        console.log(data.call);\n        break;\n      case 'rc-call-resume-notify':\n        // get call when user unholds call\n        console.log(data.call);\n        break;\n      case 'rc-call-end-notify':\n        // get call on call end event\n        console.log(data.call);\n        break;\n      case 'rc-call-mute-notify':\n        // get call on call muted or unmuted event\n        console.log(data.call);\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#call-event-types","title":"Call event types","text":"Event Trigger <code>rc-call-ring-notify</code> fired when user gets a ringing incoming call <code>rc-call-init-notify</code> fired when user create a call from dial pad <code>rc-call-start-notify</code> fired when user accepts a ringing call or a outbound call is connected <code>rc-call-hold-notify</code> fired when user holds a call <code>rc-call-resume-notify</code> fired when user unholds a call <code>rc-call-end-notify</code> fired when call is ended <code>rc-call-mute-notify</code> fired when call is muted or unmuted <p>VOIP call vs physical phone calls</p> <p>When user creates a call to a physical phone number, <code>rc-call-start-notify</code> is fired when callee accepts call. When user creates a call to a VOIP phone number (such as bettween RingCentral account), <code>rc-call-start-notify</code> is fired when outbound call is ringing in callee side.</p>"},{"location":"integration/events/#web-phone-connection-status-event","title":"Web phone connection status event","text":"<p>1.8.3</p> <p>Embeddable's web phone (browser-based calling) works only after having successfully connected with a SIP server. To detect when the phone is connected:</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-webphone-connection-status-notify':\n        // get call on active call updated event\n        console.log(data.connectionStatus); // connectionStatus-connected, connectionStatus-disconnected\n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/events/#web-phone-sessions-sync-event","title":"Web phone sessions sync event","text":"<p>1.8.3</p> <p>To get current active web phone calls send the sync trigger to Embeddable. </p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-webphone-sessions-sync',\n}, '*');\n</code></pre> <p>Only send this trigger after getting web phone connected event.</p> <p>Receive active web phone calls via message event:</p> <pre><code>window.addEventListener('message', (e) =&gt; {\n  const data = e.data;\n  if (data) {\n    switch (data.type) {\n      case 'rc-webphone-sessions-sync':\n        console.log(data.calls); \n        break;\n      default:\n        break;\n    }\n  }\n});\n</code></pre>"},{"location":"integration/feedback-prompt/","title":"Add feedback prompt in Settings tab","text":"<p>This feature requires you to register your app as a service first.</p> <p>For developer who want to add feedback feature, the app provides a API to show a feed link in settings page:</p> <p>First, register service with <code>feedbackPath</code>:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    feedbackPath: '/feedback',\n  }\n}, '*');\n</code></pre> <p>After registering, you can get feedback link in settings page:</p> <p></p> <p>Add a message event to listen feedback link click event and handle that:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/feedback') {\n\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n      // add your codes here to show your feedback form\n      console.log(data);\n    }\n  }\n});\n</code></pre>"},{"location":"integration/feedback-prompt/#add-feedback-button-at-header","title":"Add feedback button at header","text":"<p>You can also add a feedback button at header, this way doesn't require to register service:</p> <p>1.10.0</p> <pre><code>RCAdapter.showFeedback({\n  onFeedback: function () {\n    // add your codes here to show your feedback form\n  },\n});\n</code></pre>"},{"location":"integration/log-video-meeting/","title":"Log RingCentral video meeting into your service","text":"<p>This feature requires you to register your app as a service first.</p> <p>This is only relevant for customers who use RingCentral Video</p> <p>First you need to pass <code>meetingLoggerPath</code> and <code>meetingLoggerTitle</code> when you register service.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    meetingLoggerPath: '/meetingLogger',\n    meetingLoggerTitle: 'Log to TestService',\n  }\n}, '*');\n</code></pre> <p>After registered, you can get a <code>Log to TestService</code> in meeting history page.</p> <p>Then add a message event to response meeting logger button event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/meetingLogger') {\n      // add your codes here to log meeting to your service\n      console.log(data);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/meeting-schedule/","title":"Add meeting schedule feature with your service","text":"<p>This feature requires you to register your app as a service first.</p> <p>Deprecated. This is only relevant for customers who use RingCentral Meetings</p> <p>First we need to add <code>Meeting</code> permission into your app in RingCentral Developer website if you are using your own RingCentral client id. This works on RingCentral Video or RingCentral Meetings service.</p> <p>Then pass <code>meetingInvitePath</code> and <code>meetingInviteTitle</code> when you register service.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService', // service name\n    meetingInvitePath: '/meeting/invite',\n    meetingInviteTitle: 'Invite with TestService',\n  }\n}, '*');\n</code></pre> <p>After registered, we can get <code>Schedule Meeting</code> page in navigator, and <code>Invite</code> button in meeting page:</p> <p></p> <p>Add a message event to response meeting invite button event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/meeting/invite') {\n      // add your codes here to handle meeting invite data\n      console.log(data);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/message-logging/","title":"Log messages into your service","text":"<p>This feature requires you to register your app as a service first.</p>"},{"location":"integration/message-logging/#add-message-logger-button-in-messages-page","title":"Add message logger button in messages page","text":"<p>First you need to pass <code>messageLoggerPath</code> and <code>messageLoggerTitle</code> when you register service.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    messageLoggerPath: '/messageLogger',\n    messageLoggerTitle: 'Log to TestService',\n    // messageLoggerAutoSettingLabel: 'Auto log messages', // optional, customize the auto log setting label\n    // attachmentWithToken: true,\n  }\n}, '*');\n</code></pre> <p>After registered, you can get a <code>Log to TestService</code> in messages page, and <code>Auto log messages</code> setting in setting page:</p> <p></p> <p>Then add a message event to response message logger button event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/messageLogger') {\n      // add your codes here to log messages to your service\n      console.log(data);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p>This message event is fired when user clicks <code>Log</code> button. Or if user enables <code>Auto log messages</code> in settings, this event will be also fired when a message is created and updated.</p> <p>In this message event, you can get call information in <code>data.body.conversation</code>. Messages are grouped by <code>conversationId</code> and <code>date</code>. So for a conversation that have messages in different date, you will receive multiple log message event.</p> <p>For Voicemail and Fax, you can get <code>attachment</code> data in message. The <code>attachment.link</code> is a link used to get voicemail file from RingCentral server with Browser. The <code>attachment.uri</code> is a URI which can be used to get attachment file  with RingCentral access token. If you pass <code>attachmentWithToken</code> when register service, you can get <code>attachment.uri</code> with <code>access_token</code>. The <code>access_token</code> will be expired in minutes, so need to download immediately when get it. </p>"},{"location":"integration/message-logging/#auto-log-messages-settings","title":"Auto log messages settings","text":"<p>1.10.0</p> <p>User can enable/disable auto log in settings page. To set default <code>Auto log messages</code> enabled:</p> <p>Add <code>defaultAutoLogMessageEnabled</code> into the <code>adapter.js</code> URI:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js?defaultAutoLogMessageEnabled=1\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>Listen to <code>Auto log messages</code> setting changed:</p> <p>2.0.0</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-messageLogger-auto-log-notify') {\n    console.log('rc-messageLogger-auto-log-notify:', data.autoLog);\n  }\n});\n</code></pre>"},{"location":"integration/message-logging/#add-message-log-entity-matcher","title":"Add message log entity matcher","text":"<p>In message logger, widget needs to know if messages are logged. To provide <code>messageLogEntityMatcherPath</code> when register, widget will send match request to get match result of messages history.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    messageLoggerPath: '/callLogger',\n    messageLoggerTitle: 'Log to TestService',\n    messageLogEntityMatcherPath: '/messageLogger/match'\n  }\n}, '*');\n</code></pre> <p>Then add a message event to response message logger match event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/messageLogger/match') {\n      // add your codes here to reponse match result\n      console.log(data); // get message conversation log id list in here\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: {\n          data: {\n            '674035477569017905/7/2/2019': [{ // conversation log id from request\n              id: '88888', // log entity id from your platform\n            }]\n          }\n        },\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/message-logging/#message-log-page","title":"Message log page","text":"<p>2.0.0</p> <p>You can also add a message log page to have an related form when user logs messages to your service. </p> <p></p> <p>Register message log service:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    messageLoggerPath: '/messageLogger',\n    messageLoggerTitle: 'Log to TestService',\n    messagesLogPageInputChangedEventPath: '/messageLogger/inputChanged',\n  }\n}, '*');\n</code></pre> <p>Then add message event listener to show message log page and input changed request:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/messageLogger') {\n      // Get trigger type: data.body.triggerType\n      // When user click log button in message item, triggerType is 'manual'\n      // When user enable auto log, triggerType is 'auto' for new message\n      if (data.body.triggerType === 'manual') {\n        // customize message log page\n        document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n          type: 'rc-adapter-update-messages-log-page',\n          page: {\n            title: 'Log to TestService',\n            // schema and uiSchema are used to customize call log page, api is the same as [JSON schema page document](https://ringcentral.github.io/ringcentral-embeddable/jsonschema-page/?path=/docs/readme--docs)\n            schema: {\n              type: 'object',\n              required: ['contact', 'noteActions'],\n              properties: {\n                \"warning\": {\n                  \"type\": \"string\",\n                  \"description\": \"No contact found. Enter a name to have a placeholder contact made for you.\",\n                },\n                \"contact\": {\n                  \"title\": \"Contact\",\n                  \"type\": \"string\",\n                  \"oneOf\": [\n                    {\n                      \"const\": \"xxx\",\n                      \"title\": \"John Doe\",\n                      \"description\": \"Candidate - 347\",\n                    },\n                    {\n                      \"const\": \"newEntity\",\n                      \"title\": \"Create placeholder contact\"\n                    }\n                  ],\n                },\n                \"contactName\": {\n                  \"type\": 'string',\n                  \"title\": \"Contact name\",\n                },\n                \"contactType\": {\n                  \"title\": \"Contact type\",\n                  \"type\": \"string\",\n                  \"oneOf\": [\n                    {\n                      \"const\": \"candidate\",\n                      \"title\": \"Candidate\"\n                    },\n                    {\n                      \"const\": \"contact\",\n                      \"title\": \"Contact\"\n                    }\n                  ],\n                },\n                \"noteActions\": {\n                  \"type\": \"string\",\n                  \"title\": \"Note actions\",\n                  \"oneOf\": [\n                    {\n                      \"const\": \"prescreen\",\n                      \"title\": \"Prescreen\"\n                    },\n                    {\n                      \"const\": \"interview\",\n                      \"title\": \"Interview\"\n                    }\n                  ],\n                },\n                \"note\": {\n                  \"type\": \"string\",\n                  \"title\": \"Note\"\n                },\n              }\n            },\n            uiSchema: {\n              warning: {\n                \"ui:field\": \"admonition\", // or typography to show raw text\n                \"ui:severity\": \"warning\", // \"warning\", \"info\", \"error\", \"success\"\n              },\n              contactName: {\n                \"ui:placeholder\": 'Enter name',\n                \"ui:widget\": \"hidden\", // remove this line to show contactName input\n              },\n              contactType: {\n                \"ui:placeholder\": 'Select contact type',\n                \"ui:widget\": \"hidden\", // remove this line to show contactName input\n              },\n              note: {\n                \"ui:placeholder\": 'Enter note',\n                \"ui:widget\": \"textarea\",  // show note input as textarea\n              },\n              submitButtonOptions: {\n                submitText: 'Save',\n              },\n            },\n            formData: {\n              contact: 'xxx',\n              contactName: '',\n              contactType: '',\n              noteActions: 'prescreen',\n              note: '',\n            },\n          }\uff0c\n        }, '*');\n        // navigate to message log page\n        document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n          type: 'rc-adapter-navigate-to',\n          path: `/log/messages/${data.body.conversation.conversationId}`, // conversation id that you received from message logger event\n        }, '*');\n      }\n      if (data.body.triggerType === 'logForm' || data.body.triggerType === 'auto') {\n        // Save message log to your platform\n        console.log(data.body); // data.body.conversation, data.body.formData\n      }\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n    if (data.path === '/messageLogger/inputChanged') {\n      console.log(data); // get input changed data in here: data.body.formData\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n      // you can update message log page data here to make the form dynamic\n      return;\n    }\n  }\n});\n</code></pre> <p>JSON Schema reference</p> <p>Learn how to define custom page with JSON schema in the JSON schema page document.</p>"},{"location":"integration/new-latest-uri/","title":"Migrating from Github Page latest URI","text":"<p>In previously, we deployed the latest build at Github Page: <code>https://ringcentral.github.io/ringcentral-embeddable/</code>. And now the latest build is deployed at <code>https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/</code> to have more stable network access.</p> <p>To migrate to the new latest URI, you can just replace the old URI with the new one. </p> Javascriptiframe <p>Update adapter js src:</p> <pre><code>&lt;script&gt;\n  (function() {\n    var rcs = document.createElement(\"script\");\n    rcs.src = \"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/adapter.js\";\n    var rcs0 = document.getElementsByTagName(\"script\")[0];\n    rcs0.parentNode.insertBefore(rcs, rcs0);\n  })();\n&lt;/script&gt;\n</code></pre> <p>Update iframe src:</p> <pre><code>&lt;iframe width=\"300\" height=\"500\" allow=\"microphone\" \n  src=\"https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/app.html\"&gt;\n&lt;/iframe&gt;\n</code></pre> <p>Then add new redirect URI in your RingCentral app settings to</p> <pre><code>https://apps.ringcentral.com/integration/ringcentral-embeddable/latest/redirect.html\n</code></pre> <p>After migrating, user will need to re-authorize RingCentral to your app to use the widget as domain changed.</p>"},{"location":"integration/sms-toolbar-button/","title":"SMS toolbar button","text":"<p>First, register service with <code>buttonEventPath</code>:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    buttonEventPath: '/button-click',\n    buttons: [{\n      id: 'template',\n      type: 'smsToolbar',\n      icon: 'icon_url',\n      label: 'Template',\n    }],\n  }\n}, '*');\n</code></pre> <p>Add a message event to listen button click event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/button-click') {\n      // add your codes here to handle the vcard file download event\n      console.log(data.body.button);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/third-party-auth/","title":"Add third-party authorization button","text":"<p>For some CRM API, they requires user to authorize firstly. This feature allows developer to add a third party authorization button and sync status into widget.</p> <p>First you need to pass <code>authorizationPath</code>, <code>authorizedTitle</code>, <code>unauthorizedTitle</code> and <code>authorized</code> when you register service.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    displayName: 'TestServiceDisplayName', // Optional, supported from 2.0.1\n    info: 'Some description about this service', // Optional, supported from 2.0.0\n    authorizationPath: '/authorize',\n    authorizedTitle: 'Unauthorize',\n    unauthorizedTitle: 'Authorize',\n    authorized: false,\n    authorizedAccount: 'test@email.com', // optional, authorized account email or id\n    authorizationLogo: 'https://your_brand_picture/logo.png', // optional, show your brand logo in authorization section, recommended: height 30px, width &lt; 85px.\n    // showAuthRedDot: true, // optional, this will show red dot at settings page when need to auth\n  }\n}, '*');\n</code></pre> <p>After registered, you can get a <code>TestService authorization button</code> in setting page:</p> <p></p> <p>Add a message event to response authorization button event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/authorize') {\n      // add your codes here to handle third party authorization\n      console.log(data);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre> <p>Update authorization status in widget:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-update-authorization-status',\n  authorized: true,\n  authorizedAccount: 'test@email.com', // optional, authorized account email or id\n}, '*');\n</code></pre> <p>If you register an authorization service into Embeddable, the contacts-related service above will work only after the user's status has changed to authorized.</p>"},{"location":"integration/upcoming-meetings/","title":"Show upcoming meeting list in RingCentral Video page","text":"<p>This feature requires you to register your app as a service first.</p> <p>This only works on RingCentral Video meeting service.</p> <p>First you need to pass <code>meetingUpcomingPath</code> when you register meeting invite service.</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService', // service name\n    meetingInvitePath: '/meeting/invite',\n    meetingInviteTitle: 'Invite with TestService',\n    meetingUpcomingPath: '/meetingUpcomingList\n  }\n}, '*');\n</code></pre> <p>Then add a message event to response upcoming meeting  request:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/meetingUpcomingList') {\n      // add your codes here to query upcoming meeting from your service\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: {\n          data: [{\n            id: '123456',\n            title: 'Test Meeting in TestService',\n            editEventUrl: 'https://your_meeting_uri',\n            startTime: \"2020-03-22T01:00:00Z\",\n            endTime: \"2020-03-22T02:00:00Z\",\n            meetingIds: ['433214948'],\n          }],\n        },\n      }, '*');\n    }\n  }\n});\n</code></pre>"},{"location":"integration/vcard-clicks/","title":"VCard click handler","text":"<p>This feature requires you to register your app as a service first.</p> <p>In SMS messages, user can receive vcard (contact) file with MMS. We allow third party to handle the vard attachment download event. For example, when user click vcard file download button, your service will receive the vcard URI, and save the contact into your service.</p> <p>First, register service with <code>vcardHandlerPath</code>:</p> <pre><code>document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n  type: 'rc-adapter-register-third-party-service',\n  service: {\n    name: 'TestService',\n    vcardHandlerPath: '/vcardHandler',\n  }\n}, '*');\n</code></pre> <p>Add a message event to listen vcard click event:</p> <pre><code>window.addEventListener('message', function (e) {\n  var data = e.data;\n  if (data &amp;&amp; data.type === 'rc-post-message-request') {\n    if (data.path === '/vcardHandler') {\n      // add your codes here to handle the vcard file download event\n      console.log(data.body.vcardUri);\n      // response to widget\n      document.querySelector(\"#rc-widget-adapter-frame\").contentWindow.postMessage({\n        type: 'rc-post-message-response',\n        responseId: data.requestId,\n        response: { data: 'ok' },\n      }, '*');\n    }\n  }\n});\n</code></pre>"}]}