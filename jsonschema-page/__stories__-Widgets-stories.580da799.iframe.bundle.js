"use strict";(self.webpackChunk_ringcentral_integration_jsonschema_page=self.webpackChunk_ringcentral_integration_jsonschema_page||[]).push([[646],{"./src/__stories__/Widgets.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BooleanToggleWidget:function(){return BooleanToggleWidget},CheckboxWidget:function(){return CheckboxWidget},FileUploadWidget:function(){return FileUploadWidget},NumberInputWidget:function(){return NumberInputWidget},RadioWidget:function(){return RadioWidget},RangeWidget:function(){return RangeWidget},SelectWidget:function(){return SelectWidget},TextInputWidget:function(){return TextInputWidget},TextareaWidget:function(){return TextareaWidget},__namedExportsOrder:function(){return __namedExportsOrder}});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/index.js"),_ringcentral_juno__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/@ringcentral/juno/es6/foundation/theme/ThemeProvider.js"),_index__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/index.tsx");const StoryLayout=({args:args,children:children,resultComponent:resultComponent})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{display:"flex",gap:"20px",maxWidth:"1400px",margin:"0 auto"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{flex:"0 0 45%",minWidth:"300px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{padding:"15px",background:"#f0f8ff",borderRadius:"8px",border:"1px solid #0066cc",marginBottom:"15px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#0066cc"},children:"📋 JSON Configuration"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre",{style:{fontSize:"11px",overflow:"auto",maxHeight:"400px",margin:0,background:"white",padding:"10px",borderRadius:"4px",border:"1px solid #ddd"},children:JSON.stringify({schema:args.schema,uiSchema:args.uiSchema,formData:args.formData},null,2)})]}),resultComponent&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{padding:"15px",background:"#f5f5f5",borderRadius:"8px",border:"1px solid #ccc"},children:resultComponent})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{flex:"1",minWidth:"300px"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_ringcentral_juno__WEBPACK_IMPORTED_MODULE_3__.E,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{padding:"20px",background:"white",borderRadius:"8px",border:"1px solid #e0e0e0",boxShadow:"0 2px 4px rgba(0,0,0,0.1)"},children:children})})})]}),meta={title:"JSONSchemaPage/Form Input Widgets",component:_index__WEBPACK_IMPORTED_MODULE_2__.v,parameters:{layout:"fullscreen",docs:{description:{component:"Form input widgets for collecting user data - Text inputs, Numbers, Selections, Toggles, File uploads, and other interactive form controls"}}},tags:["autodocs"]};__webpack_exports__.default=meta;const TextInputWidget={args:{schema:{type:"object",properties:{basicText:{type:"string",title:"Basic Text Input",description:"Standard text input field"},emailInput:{type:"string",format:"email",title:"Email Input",description:"Email format validation"},urlInput:{type:"string",format:"uri",title:"URL Input",description:"URL format validation"},passwordInput:{type:"string",title:"Password Input",description:"Hidden text input"},patternText:{type:"string",title:"Pattern Validation",pattern:"^[A-Za-z]+$",description:"Only letters allowed"},minMaxText:{type:"string",title:"Length Validation",minLength:3,maxLength:10,description:"Between 3-10 characters"}}},uiSchema:{basicText:{"ui:placeholder":"Enter any text..."},emailInput:{"ui:placeholder":"user@example.com"},urlInput:{"ui:placeholder":"https://example.com"},passwordInput:{"ui:widget":"password","ui:placeholder":"Enter password"},patternText:{"ui:placeholder":"LettersOnly","ui:help":"Only alphabetic characters are allowed"},minMaxText:{"ui:placeholder":"Min 3, Max 10 chars"}},formData:{basicText:"Sample text",emailInput:"user@example.com",urlInput:"https://ringcentral.com"}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Input Statistics"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{fontSize:"12px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Basic Text: ",formData.basicText?.length||0," characters"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Email Valid: ",/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.emailInput)?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["URL Valid: ",/^https?:\/\/.+/.test(formData.urlInput)?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Pattern Valid: ",/^[A-Za-z]+$/.test(formData.patternText)?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Length Valid: ",formData.minMaxText?.length>=3&&formData.minMaxText?.length<=10?"✅":"❌"]})]})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},NumberInputWidget={args:{schema:{type:"object",properties:{basicNumber:{type:"number",title:"Basic Number",description:"Any numeric value"},integerOnly:{type:"integer",title:"Integer Only",description:"Whole numbers only"},minMaxNumber:{type:"number",title:"Range Constrained",minimum:0,maximum:100,description:"Between 0 and 100"},stepNumber:{type:"number",title:"Step Increment",multipleOf:.5,description:"Increments of 0.5"},currencyAmount:{type:"number",title:"Currency Amount",minimum:0,multipleOf:.01,description:"Dollar amount (cents precision)"},percentage:{type:"number",title:"Percentage",minimum:0,maximum:100,multipleOf:.01,description:"Percentage value"}}},uiSchema:{basicNumber:{"ui:placeholder":"123.45"},integerOnly:{"ui:placeholder":"42"},minMaxNumber:{"ui:placeholder":"50"},stepNumber:{"ui:placeholder":"1.5","ui:options":{step:.5}},currencyAmount:{"ui:placeholder":"19.99","ui:options":{step:.01}},percentage:{"ui:placeholder":"75.25","ui:options":{step:.01}}},formData:{basicNumber:123.45,integerOnly:42,minMaxNumber:50,stepNumber:2.5,currencyAmount:19.99,percentage:75.25}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Number Analysis"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{fontSize:"12px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Basic: ",formData.basicNumber]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Integer: ",formData.integerOnly," ",Number.isInteger(formData.integerOnly)?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Range Valid: ",formData.minMaxNumber>=0&&formData.minMaxNumber<=100?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Step Valid: ",formData.stepNumber%.5==0?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Currency: $",formData.currencyAmount?.toFixed(2)]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Percentage: ",formData.percentage,"%"]})]})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},BooleanToggleWidget={args:{schema:{type:"object",properties:{basicToggle:{type:"boolean",title:"Basic Toggle",description:"Simple on/off switch"},defaultTrue:{type:"boolean",title:"Default Enabled",default:!0,description:"Defaults to enabled state"},requiredToggle:{type:"boolean",title:"Required Agreement",description:"Must be checked to proceed"},consentToggle:{type:"boolean",title:"Marketing Consent",description:"Receive marketing communications"},privacyToggle:{type:"boolean",title:"Privacy Settings",description:"Enable privacy mode"},notificationToggle:{type:"boolean",title:"Push Notifications",description:"Allow push notifications"}},required:["requiredToggle"]},uiSchema:{basicToggle:{"ui:widget":"checkbox"},defaultTrue:{"ui:widget":"checkbox"},requiredToggle:{"ui:widget":"checkbox","ui:help":"This field is required"},consentToggle:{"ui:widget":"checkbox"},privacyToggle:{"ui:widget":"checkbox"},notificationToggle:{"ui:widget":"checkbox"}},formData:{basicToggle:!1,defaultTrue:!0,requiredToggle:!0,consentToggle:!1,privacyToggle:!0,notificationToggle:!1}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{}),enabledCount=Object.values(formData).filter(Boolean).length,totalCount=Object.keys(formData).length;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Toggle States"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{fontSize:"12px",marginBottom:"15px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Enabled: ",enabledCount,"/",totalCount]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Progress: ",Math.round(enabledCount/totalCount*100),"%"]})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{fontSize:"12px"},children:Object.entries(formData).map(([key,value])=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:[key,": ",value?"✅ ON":"❌ OFF"]},key))})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},FileUploadWidget={args:{schema:{type:"object",properties:{singleFile:{type:"string",title:"Single File Upload",format:"data-url",description:"Select a single file to upload"},profileImage:{type:"string",title:"Profile Image",format:"data-url",description:"Upload your profile picture (JPG, PNG only)"},resume:{type:"string",title:"Resume (Max 5MB)",format:"data-url",description:"Upload your resume (PDF, DOC files)"},documents:{type:"array",title:"Multiple Documents",items:{type:"string",format:"data-url"},description:"Upload multiple files at once"}}},uiSchema:{singleFile:{"ui:widget":"file","ui:accept":"*/*","ui:placeholder":"Choose any file..."},profileImage:{"ui:widget":"file","ui:accept":"image/*","ui:placeholder":"Choose an image..."},resume:{"ui:widget":"file","ui:accept":".pdf,.doc,.docx","ui:maxSize":5242880,"ui:placeholder":"Choose a document..."},documents:{items:{"ui:widget":"file","ui:multiple":!0,"ui:accept":"*/*","ui:placeholder":"Choose multiple files..."}}},formData:{singleFile:null,profileImage:null,resume:null,documents:null}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{}),[uploadStats,setUploadStats]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({totalFiles:0,totalSize:0,fileTypes:{}});react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{const allFiles=[];formData.singleFile&&"object"==typeof formData.singleFile&&allFiles.push(formData.singleFile),formData.profileImage&&"object"==typeof formData.profileImage&&allFiles.push(formData.profileImage),formData.resume&&"object"==typeof formData.resume&&allFiles.push(formData.resume),Array.isArray(formData.documents)&&allFiles.push(...formData.documents);const stats=allFiles.reduce((acc,file)=>{if(file&&file.name&&file.size){acc.totalFiles+=1,acc.totalSize+=file.size;const ext=file.name.split(".").pop()?.toLowerCase()||"unknown";acc.fileTypes[ext]=(acc.fileTypes[ext]||0)+1}return acc},{totalFiles:0,totalSize:0,fileTypes:{}});setUploadStats(stats)},[formData]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Upload Statistics"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{fontSize:"12px",marginBottom:"15px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Total Files: ",uploadStats.totalFiles]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Total Size: ",(bytes=>{if(0===bytes)return"0 Bytes";const i=Math.floor(Math.log(bytes)/Math.log(1024));return parseFloat((bytes/Math.pow(1024,i)).toFixed(2))+" "+["Bytes","KB","MB","GB"][i]})(uploadStats.totalSize)]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"File Types:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("ul",{style:{margin:"5px 0",paddingLeft:"20px"},children:Object.entries(uploadStats.fileTypes).length>0?Object.entries(uploadStats.fileTypes).map(([type,count])=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("li",{children:[type,": ",count," file",count>1?"s":""]},type)):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li",{children:"No files uploaded yet"})})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"15px 0 10px 0",color:"#555"},children:"💡 Widget Features"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{fontSize:"11px",marginBottom:"15px",color:"#666"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"• Single file: Returns FileInfoType object with dataURL, name, size, type"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"• Multiple files: Returns array of FileInfoType objects"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"• File size validation: resume field has 5MB maxSize limit"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"• Accept filter: profileImage accepts only images"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"• Files are converted to base64 dataURL format"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"• Drag & drop supported, click attachment icon to browse"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"15px 0 10px 0",color:"#555"},children:"📝 Form Data"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre",{style:{fontSize:"11px",overflow:"auto",maxHeight:"200px",margin:0,background:"white",padding:"10px",borderRadius:"4px",border:"1px solid #ddd"},children:JSON.stringify(formData,null,2)})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},RangeWidget={args:{schema:{type:"object",properties:{basicRange:{type:"integer",title:"Basic Range",minimum:0,maximum:100,description:"A simple range slider"},temperatureRange:{type:"integer",title:"Temperature",minimum:-20,maximum:50,description:"Temperature in Celsius"},priceRange:{type:"number",title:"Price Range",minimum:0,maximum:1e3,multipleOf:.01,description:"Select price range"},percentageRange:{type:"integer",title:"Percentage",minimum:0,maximum:100,description:"Percentage value"}}},uiSchema:{basicRange:{"ui:widget":"range"},temperatureRange:{"ui:widget":"range","ui:options":{step:1}},priceRange:{"ui:widget":"range","ui:options":{step:10}},percentageRange:{"ui:widget":"range","ui:options":{step:5}}},formData:{basicRange:50,temperatureRange:20,priceRange:500,percentageRange:75}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Current Values"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("ul",{style:{fontSize:"12px",margin:0,paddingLeft:"20px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("li",{children:["Basic Range: ",formData.basicRange]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("li",{children:["Temperature: ",formData.temperatureRange,"°C"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("li",{children:["Price: $",formData.priceRange]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("li",{children:["Percentage: ",formData.percentageRange,"%"]})]})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},RadioWidget={args:{schema:{type:"object",properties:{favoriteColor:{type:"string",title:"Favorite Color",enum:["red","green","blue","yellow","purple"],enumNames:["Red","Green","Blue","Yellow","Purple"],description:"Choose your favorite color"},priority:{type:"string",title:"Priority Level",enum:["low","medium","high","urgent"],enumNames:["Low Priority","Medium Priority","High Priority","Urgent"]},size:{type:"string",title:"T-Shirt Size",enum:["xs","s","m","l","xl","xxl"],enumNames:["Extra Small","Small","Medium","Large","Extra Large","XXL"],description:"Select your size"}}},uiSchema:{favoriteColor:{"ui:widget":"radio"},priority:{"ui:widget":"radio"},size:{"ui:widget":"radio"}},formData:{favoriteColor:"blue",priority:"medium"}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Selected Values"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre",{style:{fontSize:"11px",overflow:"auto",maxHeight:"200px",margin:0,background:"white",padding:"10px",borderRadius:"4px",border:"1px solid #ddd"},children:JSON.stringify(formData,null,2)})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},SelectWidget={args:{schema:{type:"object",properties:{country:{type:"string",title:"Country",enum:["us","ca","uk","de","fr","jp","au"],enumNames:["United States","Canada","United Kingdom","Germany","France","Japan","Australia"],description:"Select your country"},language:{type:"string",title:"Programming Language",enum:["javascript","typescript","python","java","csharp","go","rust"],enumNames:["JavaScript","TypeScript","Python","Java","C#","Go","Rust"]},multipleLanguages:{type:"array",title:"Multiple Languages",items:{type:"string",enum:["javascript","typescript","python","java","csharp","go","rust"],enumNames:["JavaScript","TypeScript","Python","Java","C#","Go","Rust"]},uniqueItems:!0,description:"Select multiple programming languages"}}},uiSchema:{country:{"ui:placeholder":"Choose a country..."},language:{"ui:placeholder":"Select a language..."},multipleLanguages:{"ui:widget":"select","ui:placeholder":"Select languages..."}},formData:{country:"us",language:"typescript",multipleLanguages:["javascript","typescript"]}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Selected Values"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre",{style:{fontSize:"11px",overflow:"auto",maxHeight:"200px",margin:0,background:"white",padding:"10px",borderRadius:"4px",border:"1px solid #ddd"},children:JSON.stringify(formData,null,2)})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},CheckboxWidget={args:{schema:{type:"object",properties:{agreeToTerms:{type:"boolean",title:"I agree to the terms and conditions",description:"You must agree to continue"},enableNotifications:{type:"boolean",title:"Enable push notifications",default:!0},subscribeNewsletter:{type:"boolean",title:"Subscribe to newsletter",description:"Receive weekly updates via email"},features:{type:"array",title:"Enabled Features",items:{type:"string",enum:["feature1","feature2","feature3","feature4"]},uniqueItems:!0,description:"Select which features to enable"},preferences:{type:"object",title:"User Preferences",properties:{darkMode:{type:"boolean",title:"Dark Mode",default:!1},autoSave:{type:"boolean",title:"Auto Save",default:!0},showTips:{type:"boolean",title:"Show Tips",default:!0}}}}},uiSchema:{features:{"ui:widget":"checkboxes","ui:options":{enumOptions:[{value:"feature1",label:"Advanced Analytics"},{value:"feature2",label:"Real-time Sync"},{value:"feature3",label:"Custom Themes"},{value:"feature4",label:"API Access"}]}}},formData:{enableNotifications:!0,features:["feature1","feature2"],preferences:{darkMode:!1,autoSave:!0,showTips:!0}}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Checkbox States"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{fontSize:"12px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Terms Agreed: ",formData.agreeToTerms?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Notifications: ",formData.enableNotifications?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Newsletter: ",formData.subscribeNewsletter?"✅":"❌"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Features: ",formData.features?.length||0," selected"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Dark Mode: ",formData.preferences?.darkMode?"✅":"❌"]})]})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},TextareaWidget={args:{schema:{type:"object",properties:{description:{type:"string",title:"Product Description",description:"Enter a detailed description of the product"},feedback:{type:"string",title:"Feedback",description:"Share your thoughts and suggestions"},code:{type:"string",title:"Code Snippet",description:"Paste your code here"},notes:{type:"string",title:"Additional Notes",description:"Any additional information"}}},uiSchema:{description:{"ui:widget":"textarea","ui:options":{rows:4,placeholder:"Enter product description..."}},feedback:{"ui:widget":"textarea","ui:options":{rows:3,placeholder:"We value your feedback..."}},code:{"ui:widget":"textarea","ui:options":{rows:6,placeholder:"function example() {\n  // Your code here\n}"}},notes:{"ui:widget":"textarea","ui:options":{rows:2,placeholder:"Optional notes..."}}},formData:{description:"This is a high-quality product designed for professionals.",code:"function greet(name) {\n  return `Hello, ${name}!`;\n}"}},render:args=>{const[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(args.formData||{});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StoryLayout,{args:args,resultComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4",{style:{margin:"0 0 10px 0",color:"#555"},children:"📊 Text Statistics"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{fontSize:"12px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Description: ",formData.description?.length||0," characters"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Feedback: ",formData.feedback?.length||0," characters"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Code: ",formData.code?.length||0," characters"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Notes: ",formData.notes?.length||0," characters"]})]})]}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.v,{...args,formData:formData,onFormDataChange:setFormData})})}},__namedExportsOrder=["TextInputWidget","NumberInputWidget","BooleanToggleWidget","FileUploadWidget","RangeWidget","RadioWidget","SelectWidget","CheckboxWidget","TextareaWidget"];TextInputWidget.parameters={...TextInputWidget.parameters,docs:{...TextInputWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        basicText: {\n          type: 'string',\n          title: 'Basic Text Input',\n          description: 'Standard text input field'\n        },\n        emailInput: {\n          type: 'string',\n          format: 'email',\n          title: 'Email Input',\n          description: 'Email format validation'\n        },\n        urlInput: {\n          type: 'string',\n          format: 'uri',\n          title: 'URL Input',\n          description: 'URL format validation'\n        },\n        passwordInput: {\n          type: 'string',\n          title: 'Password Input',\n          description: 'Hidden text input'\n        },\n        patternText: {\n          type: 'string',\n          title: 'Pattern Validation',\n          pattern: '^[A-Za-z]+$',\n          description: 'Only letters allowed'\n        },\n        minMaxText: {\n          type: 'string',\n          title: 'Length Validation',\n          minLength: 3,\n          maxLength: 10,\n          description: 'Between 3-10 characters'\n        }\n      }\n    },\n    uiSchema: {\n      basicText: {\n        'ui:placeholder': 'Enter any text...'\n      },\n      emailInput: {\n        'ui:placeholder': 'user@example.com'\n      },\n      urlInput: {\n        'ui:placeholder': 'https://example.com'\n      },\n      passwordInput: {\n        'ui:widget': 'password',\n        'ui:placeholder': 'Enter password'\n      },\n      patternText: {\n        'ui:placeholder': 'LettersOnly',\n        'ui:help': 'Only alphabetic characters are allowed'\n      },\n      minMaxText: {\n        'ui:placeholder': 'Min 3, Max 10 chars'\n      }\n    },\n    formData: {\n      basicText: 'Sample text',\n      emailInput: 'user@example.com',\n      urlInput: 'https://ringcentral.com'\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Input Statistics</h4>\n            <div style={{\n        fontSize: '12px'\n      }}>\n              <p>Basic Text: {formData.basicText?.length || 0} characters</p>\n              <p>Email Valid: {/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.emailInput) ? '✅' : '❌'}</p>\n              <p>URL Valid: {/^https?:\\/\\/.+/.test(formData.urlInput) ? '✅' : '❌'}</p>\n              <p>Pattern Valid: {/^[A-Za-z]+$/.test(formData.patternText) ? '✅' : '❌'}</p>\n              <p>Length Valid: {formData.minMaxText?.length >= 3 && formData.minMaxText?.length <= 10 ? '✅' : '❌'}</p>\n            </div>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...TextInputWidget.parameters?.docs?.source}}},NumberInputWidget.parameters={...NumberInputWidget.parameters,docs:{...NumberInputWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        basicNumber: {\n          type: 'number',\n          title: 'Basic Number',\n          description: 'Any numeric value'\n        },\n        integerOnly: {\n          type: 'integer',\n          title: 'Integer Only',\n          description: 'Whole numbers only'\n        },\n        minMaxNumber: {\n          type: 'number',\n          title: 'Range Constrained',\n          minimum: 0,\n          maximum: 100,\n          description: 'Between 0 and 100'\n        },\n        stepNumber: {\n          type: 'number',\n          title: 'Step Increment',\n          multipleOf: 0.5,\n          description: 'Increments of 0.5'\n        },\n        currencyAmount: {\n          type: 'number',\n          title: 'Currency Amount',\n          minimum: 0,\n          multipleOf: 0.01,\n          description: 'Dollar amount (cents precision)'\n        },\n        percentage: {\n          type: 'number',\n          title: 'Percentage',\n          minimum: 0,\n          maximum: 100,\n          multipleOf: 0.01,\n          description: 'Percentage value'\n        }\n      }\n    },\n    uiSchema: {\n      basicNumber: {\n        'ui:placeholder': '123.45'\n      },\n      integerOnly: {\n        'ui:placeholder': '42'\n      },\n      minMaxNumber: {\n        'ui:placeholder': '50'\n      },\n      stepNumber: {\n        'ui:placeholder': '1.5',\n        'ui:options': {\n          step: 0.5\n        }\n      },\n      currencyAmount: {\n        'ui:placeholder': '19.99',\n        'ui:options': {\n          step: 0.01\n        }\n      },\n      percentage: {\n        'ui:placeholder': '75.25',\n        'ui:options': {\n          step: 0.01\n        }\n      }\n    },\n    formData: {\n      basicNumber: 123.45,\n      integerOnly: 42,\n      minMaxNumber: 50,\n      stepNumber: 2.5,\n      currencyAmount: 19.99,\n      percentage: 75.25\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Number Analysis</h4>\n            <div style={{\n        fontSize: '12px'\n      }}>\n              <p>Basic: {formData.basicNumber}</p>\n              <p>Integer: {formData.integerOnly} {Number.isInteger(formData.integerOnly) ? '✅' : '❌'}</p>\n              <p>Range Valid: {formData.minMaxNumber >= 0 && formData.minMaxNumber <= 100 ? '✅' : '❌'}</p>\n              <p>Step Valid: {formData.stepNumber % 0.5 === 0 ? '✅' : '❌'}</p>\n              <p>Currency: ${formData.currencyAmount?.toFixed(2)}</p>\n              <p>Percentage: {formData.percentage}%</p>\n            </div>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...NumberInputWidget.parameters?.docs?.source}}},BooleanToggleWidget.parameters={...BooleanToggleWidget.parameters,docs:{...BooleanToggleWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        basicToggle: {\n          type: 'boolean',\n          title: 'Basic Toggle',\n          description: 'Simple on/off switch'\n        },\n        defaultTrue: {\n          type: 'boolean',\n          title: 'Default Enabled',\n          default: true,\n          description: 'Defaults to enabled state'\n        },\n        requiredToggle: {\n          type: 'boolean',\n          title: 'Required Agreement',\n          description: 'Must be checked to proceed'\n        },\n        consentToggle: {\n          type: 'boolean',\n          title: 'Marketing Consent',\n          description: 'Receive marketing communications'\n        },\n        privacyToggle: {\n          type: 'boolean',\n          title: 'Privacy Settings',\n          description: 'Enable privacy mode'\n        },\n        notificationToggle: {\n          type: 'boolean',\n          title: 'Push Notifications',\n          description: 'Allow push notifications'\n        }\n      },\n      required: ['requiredToggle']\n    },\n    uiSchema: {\n      basicToggle: {\n        'ui:widget': 'checkbox'\n      },\n      defaultTrue: {\n        'ui:widget': 'checkbox'\n      },\n      requiredToggle: {\n        'ui:widget': 'checkbox',\n        'ui:help': 'This field is required'\n      },\n      consentToggle: {\n        'ui:widget': 'checkbox'\n      },\n      privacyToggle: {\n        'ui:widget': 'checkbox'\n      },\n      notificationToggle: {\n        'ui:widget': 'checkbox'\n      }\n    },\n    formData: {\n      basicToggle: false,\n      defaultTrue: true,\n      requiredToggle: true,\n      consentToggle: false,\n      privacyToggle: true,\n      notificationToggle: false\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    const enabledCount = Object.values(formData).filter(Boolean).length;\n    const totalCount = Object.keys(formData).length;\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Toggle States</h4>\n            <div style={{\n        fontSize: '12px',\n        marginBottom: '15px'\n      }}>\n              <p>Enabled: {enabledCount}/{totalCount}</p>\n              <p>Progress: {Math.round(enabledCount / totalCount * 100)}%</p>\n            </div>\n            <div style={{\n        fontSize: '12px'\n      }}>\n              {Object.entries(formData).map(([key, value]) => <p key={key}>\n                  {key}: {value ? '✅ ON' : '❌ OFF'}\n                </p>)}\n            </div>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...BooleanToggleWidget.parameters?.docs?.source}}},FileUploadWidget.parameters={...FileUploadWidget.parameters,docs:{...FileUploadWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        singleFile: {\n          type: 'string',\n          title: 'Single File Upload',\n          format: 'data-url',\n          description: 'Select a single file to upload'\n        },\n        profileImage: {\n          type: 'string',\n          title: 'Profile Image',\n          format: 'data-url',\n          description: 'Upload your profile picture (JPG, PNG only)'\n        },\n        resume: {\n          type: 'string',\n          title: 'Resume (Max 5MB)',\n          format: 'data-url',\n          description: 'Upload your resume (PDF, DOC files)'\n        },\n        documents: {\n          type: 'array',\n          title: 'Multiple Documents',\n          items: {\n            type: 'string',\n            format: 'data-url'\n          },\n          description: 'Upload multiple files at once'\n        }\n      }\n    },\n    uiSchema: {\n      singleFile: {\n        'ui:widget': 'file',\n        'ui:accept': '*/*',\n        'ui:placeholder': 'Choose any file...'\n      },\n      profileImage: {\n        'ui:widget': 'file',\n        'ui:accept': 'image/*',\n        'ui:placeholder': 'Choose an image...'\n      },\n      resume: {\n        'ui:widget': 'file',\n        'ui:accept': '.pdf,.doc,.docx',\n        'ui:maxSize': 5242880,\n        // 5MB in bytes\n        'ui:placeholder': 'Choose a document...'\n      },\n      documents: {\n        items: {\n          'ui:widget': 'file',\n          'ui:multiple': true,\n          'ui:accept': '*/*',\n          'ui:placeholder': 'Choose multiple files...'\n        }\n      }\n    },\n    formData: {\n      singleFile: null,\n      profileImage: null,\n      resume: null,\n      documents: null\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    const [uploadStats, setUploadStats] = useState({\n      totalFiles: 0,\n      totalSize: 0,\n      fileTypes: {} as Record<string, number>\n    });\n\n    // Calculate upload statistics\n    React.useEffect(() => {\n      const allFiles = [];\n\n      // Add single files\n      if (formData.singleFile && typeof formData.singleFile === 'object') {\n        allFiles.push(formData.singleFile);\n      }\n      if (formData.profileImage && typeof formData.profileImage === 'object') {\n        allFiles.push(formData.profileImage);\n      }\n      if (formData.resume && typeof formData.resume === 'object') {\n        allFiles.push(formData.resume);\n      }\n\n      // Add multiple files\n      if (Array.isArray(formData.documents)) {\n        allFiles.push(...formData.documents);\n      }\n      const stats = allFiles.reduce((acc, file) => {\n        if (file && file.name && file.size) {\n          acc.totalFiles += 1;\n          acc.totalSize += file.size;\n          const ext = file.name.split('.').pop()?.toLowerCase() || 'unknown';\n          acc.fileTypes[ext] = (acc.fileTypes[ext] || 0) + 1;\n        }\n        return acc;\n      }, {\n        totalFiles: 0,\n        totalSize: 0,\n        fileTypes: {} as Record<string, number>\n      });\n      setUploadStats(stats);\n    }, [formData]);\n    const formatFileSize = (bytes: number) => {\n      if (bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    };\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Upload Statistics</h4>\n            <div style={{\n        fontSize: '12px',\n        marginBottom: '15px'\n      }}>\n              <p>Total Files: {uploadStats.totalFiles}</p>\n              <p>Total Size: {formatFileSize(uploadStats.totalSize)}</p>\n              <p>File Types:</p>\n              <ul style={{\n          margin: '5px 0',\n          paddingLeft: '20px'\n        }}>\n                {Object.entries(uploadStats.fileTypes).length > 0 ? Object.entries(uploadStats.fileTypes).map(([type, count]) => <li key={type}>{type}: {count} file{count > 1 ? 's' : ''}</li>) : <li>No files uploaded yet</li>}\n              </ul>\n            </div>\n            <h4 style={{\n        margin: '15px 0 10px 0',\n        color: '#555'\n      }}>💡 Widget Features</h4>\n            <div style={{\n        fontSize: '11px',\n        marginBottom: '15px',\n        color: '#666'\n      }}>\n              <p>• Single file: Returns FileInfoType object with dataURL, name, size, type</p>\n              <p>• Multiple files: Returns array of FileInfoType objects</p>\n              <p>• File size validation: resume field has 5MB maxSize limit</p>\n              <p>• Accept filter: profileImage accepts only images</p>\n              <p>• Files are converted to base64 dataURL format</p>\n              <p>• Drag & drop supported, click attachment icon to browse</p>\n            </div>\n            <h4 style={{\n        margin: '15px 0 10px 0',\n        color: '#555'\n      }}>📝 Form Data</h4>\n            <pre style={{\n        fontSize: '11px',\n        overflow: 'auto',\n        maxHeight: '200px',\n        margin: 0,\n        background: 'white',\n        padding: '10px',\n        borderRadius: '4px',\n        border: '1px solid #ddd'\n      }}>\n              {JSON.stringify(formData, null, 2)}\n            </pre>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...FileUploadWidget.parameters?.docs?.source}}},RangeWidget.parameters={...RangeWidget.parameters,docs:{...RangeWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        basicRange: {\n          type: 'integer',\n          title: 'Basic Range',\n          minimum: 0,\n          maximum: 100,\n          description: 'A simple range slider'\n        },\n        temperatureRange: {\n          type: 'integer',\n          title: 'Temperature',\n          minimum: -20,\n          maximum: 50,\n          description: 'Temperature in Celsius'\n        },\n        priceRange: {\n          type: 'number',\n          title: 'Price Range',\n          minimum: 0,\n          maximum: 1000,\n          multipleOf: 0.01,\n          description: 'Select price range'\n        },\n        percentageRange: {\n          type: 'integer',\n          title: 'Percentage',\n          minimum: 0,\n          maximum: 100,\n          description: 'Percentage value'\n        }\n      }\n    },\n    uiSchema: {\n      basicRange: {\n        'ui:widget': 'range'\n      },\n      temperatureRange: {\n        'ui:widget': 'range',\n        'ui:options': {\n          step: 1\n        }\n      },\n      priceRange: {\n        'ui:widget': 'range',\n        'ui:options': {\n          step: 10\n        }\n      },\n      percentageRange: {\n        'ui:widget': 'range',\n        'ui:options': {\n          step: 5\n        }\n      }\n    },\n    formData: {\n      basicRange: 50,\n      temperatureRange: 20,\n      priceRange: 500,\n      percentageRange: 75\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Current Values</h4>\n            <ul style={{\n        fontSize: '12px',\n        margin: 0,\n        paddingLeft: '20px'\n      }}>\n              <li>Basic Range: {formData.basicRange}</li>\n              <li>Temperature: {formData.temperatureRange}°C</li>\n              <li>Price: ${formData.priceRange}</li>\n              <li>Percentage: {formData.percentageRange}%</li>\n            </ul>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...RangeWidget.parameters?.docs?.source}}},RadioWidget.parameters={...RadioWidget.parameters,docs:{...RadioWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        favoriteColor: {\n          type: 'string',\n          title: 'Favorite Color',\n          enum: ['red', 'green', 'blue', 'yellow', 'purple'],\n          enumNames: ['Red', 'Green', 'Blue', 'Yellow', 'Purple'],\n          description: 'Choose your favorite color'\n        },\n        priority: {\n          type: 'string',\n          title: 'Priority Level',\n          enum: ['low', 'medium', 'high', 'urgent'],\n          enumNames: ['Low Priority', 'Medium Priority', 'High Priority', 'Urgent']\n        },\n        size: {\n          type: 'string',\n          title: 'T-Shirt Size',\n          enum: ['xs', 's', 'm', 'l', 'xl', 'xxl'],\n          enumNames: ['Extra Small', 'Small', 'Medium', 'Large', 'Extra Large', 'XXL'],\n          description: 'Select your size'\n        }\n      }\n    },\n    uiSchema: {\n      favoriteColor: {\n        'ui:widget': 'radio'\n      },\n      priority: {\n        'ui:widget': 'radio'\n      },\n      size: {\n        'ui:widget': 'radio'\n      }\n    },\n    formData: {\n      favoriteColor: 'blue',\n      priority: 'medium'\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Selected Values</h4>\n            <pre style={{\n        fontSize: '11px',\n        overflow: 'auto',\n        maxHeight: '200px',\n        margin: 0,\n        background: 'white',\n        padding: '10px',\n        borderRadius: '4px',\n        border: '1px solid #ddd'\n      }}>\n              {JSON.stringify(formData, null, 2)}\n            </pre>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...RadioWidget.parameters?.docs?.source}}},SelectWidget.parameters={...SelectWidget.parameters,docs:{...SelectWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        country: {\n          type: 'string',\n          title: 'Country',\n          enum: ['us', 'ca', 'uk', 'de', 'fr', 'jp', 'au'],\n          enumNames: ['United States', 'Canada', 'United Kingdom', 'Germany', 'France', 'Japan', 'Australia'],\n          description: 'Select your country'\n        },\n        language: {\n          type: 'string',\n          title: 'Programming Language',\n          enum: ['javascript', 'typescript', 'python', 'java', 'csharp', 'go', 'rust'],\n          enumNames: ['JavaScript', 'TypeScript', 'Python', 'Java', 'C#', 'Go', 'Rust']\n        },\n        multipleLanguages: {\n          type: 'array',\n          title: 'Multiple Languages',\n          items: {\n            type: 'string',\n            enum: ['javascript', 'typescript', 'python', 'java', 'csharp', 'go', 'rust'],\n            enumNames: ['JavaScript', 'TypeScript', 'Python', 'Java', 'C#', 'Go', 'Rust']\n          },\n          uniqueItems: true,\n          description: 'Select multiple programming languages'\n        }\n      }\n    },\n    uiSchema: {\n      country: {\n        'ui:placeholder': 'Choose a country...'\n      },\n      language: {\n        'ui:placeholder': 'Select a language...'\n      },\n      multipleLanguages: {\n        'ui:widget': 'select',\n        'ui:placeholder': 'Select languages...'\n      }\n    },\n    formData: {\n      country: 'us',\n      language: 'typescript',\n      multipleLanguages: ['javascript', 'typescript']\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Selected Values</h4>\n            <pre style={{\n        fontSize: '11px',\n        overflow: 'auto',\n        maxHeight: '200px',\n        margin: 0,\n        background: 'white',\n        padding: '10px',\n        borderRadius: '4px',\n        border: '1px solid #ddd'\n      }}>\n              {JSON.stringify(formData, null, 2)}\n            </pre>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...SelectWidget.parameters?.docs?.source}}},CheckboxWidget.parameters={...CheckboxWidget.parameters,docs:{...CheckboxWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        agreeToTerms: {\n          type: 'boolean',\n          title: 'I agree to the terms and conditions',\n          description: 'You must agree to continue'\n        },\n        enableNotifications: {\n          type: 'boolean',\n          title: 'Enable push notifications',\n          default: true\n        },\n        subscribeNewsletter: {\n          type: 'boolean',\n          title: 'Subscribe to newsletter',\n          description: 'Receive weekly updates via email'\n        },\n        features: {\n          type: 'array',\n          title: 'Enabled Features',\n          items: {\n            type: 'string',\n            enum: ['feature1', 'feature2', 'feature3', 'feature4']\n          },\n          uniqueItems: true,\n          description: 'Select which features to enable'\n        },\n        preferences: {\n          type: 'object',\n          title: 'User Preferences',\n          properties: {\n            darkMode: {\n              type: 'boolean',\n              title: 'Dark Mode',\n              default: false\n            },\n            autoSave: {\n              type: 'boolean',\n              title: 'Auto Save',\n              default: true\n            },\n            showTips: {\n              type: 'boolean',\n              title: 'Show Tips',\n              default: true\n            }\n          }\n        }\n      }\n    },\n    uiSchema: {\n      features: {\n        'ui:widget': 'checkboxes',\n        'ui:options': {\n          enumOptions: [{\n            value: 'feature1',\n            label: 'Advanced Analytics'\n          }, {\n            value: 'feature2',\n            label: 'Real-time Sync'\n          }, {\n            value: 'feature3',\n            label: 'Custom Themes'\n          }, {\n            value: 'feature4',\n            label: 'API Access'\n          }]\n        }\n      }\n    },\n    formData: {\n      enableNotifications: true,\n      features: ['feature1', 'feature2'],\n      preferences: {\n        darkMode: false,\n        autoSave: true,\n        showTips: true\n      }\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Checkbox States</h4>\n            <div style={{\n        fontSize: '12px'\n      }}>\n              <p>Terms Agreed: {formData.agreeToTerms ? '✅' : '❌'}</p>\n              <p>Notifications: {formData.enableNotifications ? '✅' : '❌'}</p>\n              <p>Newsletter: {formData.subscribeNewsletter ? '✅' : '❌'}</p>\n              <p>Features: {formData.features?.length || 0} selected</p>\n              <p>Dark Mode: {formData.preferences?.darkMode ? '✅' : '❌'}</p>\n            </div>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...CheckboxWidget.parameters?.docs?.source}}},TextareaWidget.parameters={...TextareaWidget.parameters,docs:{...TextareaWidget.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n          title: 'Product Description',\n          description: 'Enter a detailed description of the product'\n        },\n        feedback: {\n          type: 'string',\n          title: 'Feedback',\n          description: 'Share your thoughts and suggestions'\n        },\n        code: {\n          type: 'string',\n          title: 'Code Snippet',\n          description: 'Paste your code here'\n        },\n        notes: {\n          type: 'string',\n          title: 'Additional Notes',\n          description: 'Any additional information'\n        }\n      }\n    },\n    uiSchema: {\n      description: {\n        'ui:widget': 'textarea',\n        'ui:options': {\n          rows: 4,\n          placeholder: 'Enter product description...'\n        }\n      },\n      feedback: {\n        'ui:widget': 'textarea',\n        'ui:options': {\n          rows: 3,\n          placeholder: 'We value your feedback...'\n        }\n      },\n      code: {\n        'ui:widget': 'textarea',\n        'ui:options': {\n          rows: 6,\n          placeholder: 'function example() {\\n  // Your code here\\n}'\n        }\n      },\n      notes: {\n        'ui:widget': 'textarea',\n        'ui:options': {\n          rows: 2,\n          placeholder: 'Optional notes...'\n        }\n      }\n    },\n    formData: {\n      description: 'This is a high-quality product designed for professionals.',\n      code: 'function greet(name) {\\n  return `Hello, ${name}!`;\\n}'\n    }\n  },\n  render: args => {\n    const [formData, setFormData] = useState(args.formData || {});\n    return <StoryLayout args={args} resultComponent={<>\n            <h4 style={{\n        margin: '0 0 10px 0',\n        color: '#555'\n      }}>📊 Text Statistics</h4>\n            <div style={{\n        fontSize: '12px'\n      }}>\n              <p>Description: {formData.description?.length || 0} characters</p>\n              <p>Feedback: {formData.feedback?.length || 0} characters</p>\n              <p>Code: {formData.code?.length || 0} characters</p>\n              <p>Notes: {formData.notes?.length || 0} characters</p>\n            </div>\n          </>}>\n        <JSONSchemaPage {...args} formData={formData} onFormDataChange={setFormData} />\n      </StoryLayout>;\n  }\n}",...TextareaWidget.parameters?.docs?.source}}}}}]);